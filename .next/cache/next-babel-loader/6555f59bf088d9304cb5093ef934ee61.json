{"ast":null,"code":"import React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Radio, Button, Col, Typography } from 'antd';\nimport _ from 'lodash';\nimport { removeUser } from '../../../lib/server';\nimport Router from 'next/router';\nimport { UserContext } from '../../../lib/UserProvider';\nimport styled from 'styled-components';\nimport * as typeformEmbed from '@typeform/embed';\nconst Cont = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 100%;\n    margin-top: 20px;\n    height: 70vh;\n`;\n\nconst QuizScreen = props => {\n  const {\n    changeCurrentUser,\n    changeStep,\n    isDashboard\n  } = props;\n  const {\n    currentUser\n  } = useContext(UserContext);\n  var typeform = useRef(null);\n  const designerTypes = [{\n    key: 0,\n    name: \"UI\",\n    link: \"https://sumpixelbiz.typeform.com/to/riENWs?id=\" + currentUser.id\n  }, {\n    key: 1,\n    name: \"UX\",\n    link: \"https://sumpixelbiz.typeform.com/to/TqV8Jo?id=\" + currentUser.id\n  }, {\n    key: 2,\n    name: \"Brand\",\n    link: \"https://sumpixelbiz.typeform.com/to/BOBhxP?id=\" + currentUser.id\n  }, {\n    key: 3,\n    name: \"Product\",\n    link: \"https://sumpixelbiz.typeform.com/to/irGM8E?id=\" + currentUser.id\n  }];\n  const [currentQuiz, changeQuiz] = useState(designerTypes[0]);\n  useEffect(() => {\n    if (typeform) {\n      typeformEmbed.makeWidget(typeform.current, currentQuiz.link, {\n        hideFooter: true,\n        hideHeaders: true,\n        opacity: 1\n      });\n    }\n  }, [currentQuiz]);\n\n  const goBack = async () => {\n    await removeUser(currentUser.id);\n    changeStep(-1);\n  };\n\n  const onChange = key => {\n    changeQuiz(designerTypes[key]);\n  };\n\n  const submit = () => {\n    currentUser[\"designType\"] = currentQuiz.name;\n    currentUser[\"completedQuiz\"] = true;\n    changeCurrentUser(currentUser);\n    Router.replace('/dashboard_user');\n  };\n\n  return /*#__PURE__*/React.createElement(Cont, null, /*#__PURE__*/React.createElement(Typography.Title, {\n    style: {\n      textAlign: 'center'\n    },\n    level: 4\n  }, \"Choose a Design Type and Take Your Quiz!\"), /*#__PURE__*/React.createElement(Col, {\n    style: {\n      marginTop: 10,\n      marginBottom: 20,\n      display: 'flex',\n      justifyContent: 'center'\n    }\n  }, /*#__PURE__*/React.createElement(Radio.Group, {\n    onChange: e => onChange(e.target.value),\n    value: currentQuiz.key\n  }, _.map(designerTypes, type => {\n    return /*#__PURE__*/React.createElement(Radio.Button, {\n      value: type.key\n    }, type.name);\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100%'\n    },\n    ref: typeform\n  }), isDashboard === null ? /*#__PURE__*/React.createElement(Button, {\n    style: {\n      marginTop: 20\n    },\n    type: \"default\",\n    onClick: goBack\n  }, \"Back\") : null);\n};\n\nexport default QuizScreen;","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-client/components/OnboardingFlow/Designers/QuizScreen.tsx"],"names":["React","useContext","useState","useEffect","useRef","Radio","Button","Col","Typography","_","removeUser","Router","UserContext","styled","typeformEmbed","Cont","div","QuizScreen","props","changeCurrentUser","changeStep","isDashboard","currentUser","typeform","designerTypes","key","name","link","id","currentQuiz","changeQuiz","makeWidget","current","hideFooter","hideHeaders","opacity","goBack","onChange","submit","replace","textAlign","marginTop","marginBottom","display","justifyContent","e","target","value","map","type","position","width"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useEffect, useRef } from 'react'\nimport { Form, Radio, Button, Checkbox, Row, Col, Select, Upload, message, Typography } from 'antd';\nimport _ from 'lodash'\nimport FormProps from '../FormProps'\nimport {removeUser, didCompleteQuiz} from '../../../lib/server'\nimport Router from 'next/router'\nimport {UserContext} from '../../../lib/UserProvider'\nimport styled from 'styled-components'\nimport * as typeformEmbed from '@typeform/embed'\n\nconst Cont = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 100%;\n    margin-top: 20px;\n    height: 70vh;\n`\n\n\ninterface QuizScreenProps extends FormProps {\n    isDashboard?: boolean\n}\n\ninterface QuizProp {\n    link: string, \n    name: string,\n    key: number\n}\n\nconst QuizScreen: React.FC<QuizScreenProps> = (props) => {\n    const {changeCurrentUser, changeStep, isDashboard} = props\n    const {currentUser}  = useContext(UserContext)\n    var typeform = useRef(null)\n\n    const designerTypes = [{key: 0, name: \"UI\", link: \"https://sumpixelbiz.typeform.com/to/riENWs?id=\" + currentUser.id}, \n                            {key: 1, name: \"UX\", link: \"https://sumpixelbiz.typeform.com/to/TqV8Jo?id=\" + currentUser.id}, \n                            {key: 2, name: \"Brand\", link: \"https://sumpixelbiz.typeform.com/to/BOBhxP?id=\" + currentUser.id}, \n                            {key: 3, name: \"Product\", link: \"https://sumpixelbiz.typeform.com/to/irGM8E?id=\" + currentUser.id}]\n\n    const [currentQuiz, changeQuiz] = useState<QuizProp>(designerTypes[0])\n\n\n    useEffect(() => {\n        if (typeform) {\n            typeformEmbed.makeWidget(typeform.current, currentQuiz.link, {\n                hideFooter: true,\n                hideHeaders: true,\n                opacity: 1\n            });\n        }\n    }, [currentQuiz])\n\n    const goBack = async () => {\n        await removeUser(currentUser.id)\n        changeStep(-1)\n    }\n\n    const onChange = (key: number) => {\n        changeQuiz(designerTypes[key])\n    }\n\n    const submit = () => {\n        currentUser[\"designType\"] = currentQuiz.name\n        currentUser[\"completedQuiz\"] = true\n        changeCurrentUser(currentUser)\n        Router.replace('/dashboard_user')\n    }\n\n    return (\n        <Cont>\n            <Typography.Title style={{textAlign: 'center'}} level={4}>\n                Choose a Design Type and Take Your Quiz!\n            </Typography.Title>\n            <Col style={{marginTop: 10, marginBottom: 20, display: 'flex', justifyContent: 'center'}}>\n                <Radio.Group onChange={(e) => onChange(e.target.value)} value={currentQuiz.key}>\n                    {_.map(designerTypes, (type: QuizProp) => {\n                        return <Radio.Button value={type.key}>{type.name}</Radio.Button>\n                    })}\n                </Radio.Group>\n                \n            </Col>\n            <div style={{position: 'relative', width: '100%'}} ref={typeform}/>\n            {isDashboard === null ? \n                <Button style={{marginTop: 20}} type=\"default\" onClick={goBack}>\n                    Back\n                </Button> \n            : null}\n        </Cont>\n    );\n}\n\nexport default QuizScreen"]},"metadata":{},"sourceType":"module"}