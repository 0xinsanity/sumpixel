{"ast":null,"code":"import React, { useState } from 'react';\nimport { Modal } from 'antd';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport { myFirebase } from '../lib/firebase';\nimport { Onboard } from '../components/onboard'; // Configure FirebaseUI.\n\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: 'popup',\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: '/onboard',\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [myFirebase.auth.EmailAuthProvider.PROVIDER_ID]\n};\nexport default function Index() {\n  const [isSignedIn, setSignedIn] = useState(false);\n\n  if (!isSignedIn) {\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"h1\", null, \"My App\"), /*#__PURE__*/React.createElement(\"p\", null, \"Please sign-in:\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Modal, null, /*#__PURE__*/React.createElement(StyledFirebaseAuth, {\n    uiConfig: this.uiConfig,\n    firebaseAuth: myFirebase.auth()\n  })), /*#__PURE__*/React.createElement(Onboard, null));\n}","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-onboarding/pages/index.tsx"],"names":["React","useState","Modal","StyledFirebaseAuth","myFirebase","Onboard","uiConfig","signInFlow","signInSuccessUrl","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","Index","isSignedIn","setSignedIn"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,SAAQC,UAAR,QAAyB,iBAAzB;AACA,SAAQC,OAAR,QAAsB,uBAAtB,C,CAEA;;AACA,MAAMC,QAAQ,GAAG;AACb;AACAC,EAAAA,UAAU,EAAE,OAFC;AAGb;AACAC,EAAAA,gBAAgB,EAAE,UAJL;AAKb;AACAC,EAAAA,aAAa,EAAE,CACXL,UAAU,CAACM,IAAX,CAAgBC,iBAAhB,CAAkCC,WADvB;AANF,CAAjB;AAWA,eAAe,SAASC,KAAT,GAAiB;AAC5B,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;;AAEA,MAAI,CAACa,UAAL,EAAiB;AACb,wBACI,8CACI,yCADJ,eAEI,iDAFJ,CADJ;AAMH;;AACD,sBACI,8CACI,oBAAC,KAAD,qBACI,oBAAC,kBAAD;AAAoB,IAAA,QAAQ,EAAE,KAAKR,QAAnC;AAA6C,IAAA,YAAY,EAAEF,UAAU,CAACM,IAAX;AAA3D,IADJ,CADJ,eAII,oBAAC,OAAD,OAJJ,CADJ;AAQH","sourcesContent":["import React, {useState} from 'react'\nimport { Modal } from 'antd';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport {myFirebase} from '../lib/firebase'\nimport {Onboard} from '../components/onboard'\n\n// Configure FirebaseUI.\nconst uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: 'popup',\n    // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n    signInSuccessUrl: '/onboard',\n    // We will display Google and Facebook as auth providers.\n    signInOptions: [\n        myFirebase.auth.EmailAuthProvider.PROVIDER_ID\n    ]\n};\n\nexport default function Index() {\n    const [isSignedIn, setSignedIn] = useState(false)\n\n    if (!isSignedIn) {\n        return (\n            <div>\n                <h1>My App</h1>\n                <p>Please sign-in:</p>\n            </div>\n        );\n    }\n    return (\n        <div>\n            <Modal>\n                <StyledFirebaseAuth uiConfig={this.uiConfig} firebaseAuth={myFirebase.auth()}/>\n            </Modal>\n            <Onboard/>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}