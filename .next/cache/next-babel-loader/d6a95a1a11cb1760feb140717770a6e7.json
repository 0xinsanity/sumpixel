{"ast":null,"code":"import React from 'react';\nimport { DesignerDecisionTalk, EmployerDecisionHire } from '../../../model/model';\nimport { List, Radio } from 'antd';\n\nconst EmployerCommList = props => {\n  const {\n    communicationList,\n    updateEmployerDecision\n  } = props;\n\n  const decisionToText = (fullName, dec) => {\n    switch (dec) {\n      case DesignerDecisionTalk.UNDECIDED:\n        return `${fullName} is reviewing your interest in them`;\n\n      case DesignerDecisionTalk.WILL_TALK:\n        return `${fullName} wants to talk to you you`;\n\n      case DesignerDecisionTalk.WILL_NOT_TALK:\n        return `${fullName} is not interested in your offer`;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(List, {\n    style: {\n      width: '100%'\n    },\n    dataSource: communicationList,\n    bordered: true,\n    renderItem: ({\n      communicationId,\n      fullName,\n      designerApprovedTalk,\n      decision\n    }) => /*#__PURE__*/React.createElement(List.Item, null, /*#__PURE__*/React.createElement(List.Item.Meta, {\n      title: fullName,\n      description: decisionToText(fullName, designerApprovedTalk)\n    }), /*#__PURE__*/React.createElement(Radio.Group, {\n      onChange: e => updateEmployerDecision(communicationId, e.target.value),\n      value: decision\n    }, /*#__PURE__*/React.createElement(Radio.Button, {\n      value: EmployerDecisionHire.UNDECIDED\n    }, \"Undecided\"), /*#__PURE__*/React.createElement(Radio.Button, {\n      value: EmployerDecisionHire.REJECT\n    }, \"Reject\"), /*#__PURE__*/React.createElement(Radio.Button, {\n      value: EmployerDecisionHire.HIRE\n    }, \"Hire\")))\n  });\n};\n\nexport default EmployerCommList;","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-client/components/Dashboard/Employer/EmployerCommList.tsx"],"names":["React","DesignerDecisionTalk","EmployerDecisionHire","List","Radio","EmployerCommList","props","communicationList","updateEmployerDecision","decisionToText","fullName","dec","UNDECIDED","WILL_TALK","WILL_NOT_TALK","width","communicationId","designerApprovedTalk","decision","e","target","value","REJECT","HIRE"],"mappings":"AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAIA,SAAcC,oBAAd,EAAoCC,oBAApC,QAAgF,sBAAhF;AACA,SAAoBC,IAApB,EAA0BC,KAA1B,QAAsC,MAAtC;;AAOA,MAAMC,gBAAmD,GAAIC,KAAD,IAAW;AACnE,QAAM;AAACC,IAAAA,iBAAD;AAAoBC,IAAAA;AAApB,MAA8CF,KAApD;;AAEA,QAAMG,cAAc,GAAG,CAACC,QAAD,EAAmBC,GAAnB,KAAyD;AAC5E,YAAQA,GAAR;AACI,WAAKV,oBAAoB,CAACW,SAA1B;AACI,eAAQ,GAAEF,QAAS,qCAAnB;;AACJ,WAAKT,oBAAoB,CAACY,SAA1B;AACI,eAAQ,GAAEH,QAAS,2BAAnB;;AACJ,WAAKT,oBAAoB,CAACa,aAA1B;AACI,eAAQ,GAAEJ,QAAS,kCAAnB;AANR;AAQH,GATD;;AAWA,sBACI,oBAAC,IAAD;AACI,IAAA,KAAK,EAAE;AAACK,MAAAA,KAAK,EAAE;AAAR,KADX;AAEI,IAAA,UAAU,EAAER,iBAFhB;AAGI,IAAA,QAAQ,MAHZ;AAII,IAAA,UAAU,EAAE,CAAC;AAACS,MAAAA,eAAD;AAAkBN,MAAAA,QAAlB;AAA4BO,MAAAA,oBAA5B;AAAkDC,MAAAA;AAAlD,KAAD,kBACR,oBAAC,IAAD,CAAM,IAAN,qBACI,oBAAC,IAAD,CAAM,IAAN,CAAW,IAAX;AAAgB,MAAA,KAAK,EAAER,QAAvB;AAAiC,MAAA,WAAW,EAAED,cAAc,CAACC,QAAD,EAAWO,oBAAX;AAA5D,MADJ,eAEI,oBAAC,KAAD,CAAO,KAAP;AAAa,MAAA,QAAQ,EAAGE,CAAD,IAAOX,sBAAsB,CAACQ,eAAD,EAAkBG,CAAC,CAACC,MAAF,CAASC,KAA3B,CAApD;AAAuF,MAAA,KAAK,EAAEH;AAA9F,oBACI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAEhB,oBAAoB,CAACU;AAA1C,mBADJ,eAEI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAEV,oBAAoB,CAACoB;AAA1C,gBAFJ,eAGI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAEpB,oBAAoB,CAACqB;AAA1C,cAHJ,CAFJ;AALR,IADJ;AAiBH,CA/BD;;AAiCA,eAAelB,gBAAf","sourcesContent":["import React, {useContext} from 'react'\nimport {UserContext} from '../../../lib/UserProvider'\nimport QuizScreen from '../../OnboardingFlow/Designers/QuizScreen'\nimport {createUser} from '../../../lib/server'\nimport {User, DesignerDecisionTalk, EmployerDecisionHire, CommForEmployer} from '../../../model/model'\nimport {Typography, List, Radio} from 'antd'\n\ninterface CommunicationsListProps {\n    communicationList: CommForEmployer[]\n    updateEmployerDecision: (commId: string, update: EmployerDecisionHire) => void\n}\n\nconst EmployerCommList: React.FC<CommunicationsListProps> = (props) => {\n    const {communicationList, updateEmployerDecision} = props\n\n    const decisionToText = (fullName: string, dec: DesignerDecisionTalk): string => {\n        switch (dec) {\n            case DesignerDecisionTalk.UNDECIDED:\n                return `${fullName} is reviewing your interest in them`\n            case DesignerDecisionTalk.WILL_TALK:\n                return `${fullName} wants to talk to you you`\n            case DesignerDecisionTalk.WILL_NOT_TALK:\n                return `${fullName} is not interested in your offer`\n        }\n    }\n\n    return (\n        <List\n            style={{width: '100%'}}\n            dataSource={communicationList}\n            bordered\n            renderItem={({communicationId, fullName, designerApprovedTalk, decision}) => (\n                <List.Item>\n                    <List.Item.Meta title={fullName} description={decisionToText(fullName, designerApprovedTalk)}/>\n                    <Radio.Group onChange={(e) => updateEmployerDecision(communicationId, e.target.value)} value={decision}>\n                        <Radio.Button value={EmployerDecisionHire.UNDECIDED}>Undecided</Radio.Button>\n                        <Radio.Button value={EmployerDecisionHire.REJECT}>Reject</Radio.Button>\n                        <Radio.Button value={EmployerDecisionHire.HIRE}>Hire</Radio.Button>\n                    </Radio.Group>\n                </List.Item>\n            )}\n        />\n    )\n}\n\nexport default EmployerCommList"]},"metadata":{},"sourceType":"module"}