{"ast":null,"code":"import React from 'react';\nimport { DesignerDecisionTalk } from '../../../model/model';\nimport { List, Radio } from 'antd';\n\nconst CommunicationsList = props => {\n  const {\n    communicationList,\n    updateDesignerText\n  } = props;\n  return /*#__PURE__*/React.createElement(List, {\n    dataSource: communicationList,\n    bordered: true,\n    renderItem: ({\n      communicationId,\n      companyName,\n      designerApprovedTalk,\n      decision\n    }) => /*#__PURE__*/React.createElement(List.Item, null, /*#__PURE__*/React.createElement(List.Item.Meta, {\n      title: companyName,\n      description: decision\n    }), /*#__PURE__*/React.createElement(Radio.Group, {\n      onChange: e => updateDesignerText(communicationId, e.target.value),\n      value: designerApprovedTalk\n    }, /*#__PURE__*/React.createElement(Radio.Button, {\n      value: DesignerDecisionTalk.UNDECIDED\n    }, \"Undecided\"), /*#__PURE__*/React.createElement(Radio.Button, {\n      value: DesignerDecisionTalk.WILL_TALK\n    }, \"Will Talk\"), /*#__PURE__*/React.createElement(Radio.Button, {\n      value: DesignerDecisionTalk.WILL_NOT_TALK\n    }, \"Will Not Talk\")))\n  });\n};\n\nexport default CommunicationsList;","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-client/components/Dashboard/Designer/CommunicationsList.tsx"],"names":["React","DesignerDecisionTalk","List","Radio","CommunicationsList","props","communicationList","updateDesignerText","communicationId","companyName","designerApprovedTalk","decision","e","target","value","UNDECIDED","WILL_TALK","WILL_NOT_TALK"],"mappings":"AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAIA,SAAcC,oBAAd,QAA6E,sBAA7E;AACA,SAAoBC,IAApB,EAA0BC,KAA1B,QAAsC,MAAtC;;AAOA,MAAMC,kBAAqD,GAAIC,KAAD,IAAW;AACrE,QAAM;AAACC,IAAAA,iBAAD;AAAoBC,IAAAA;AAApB,MAA0CF,KAAhD;AAEA,sBACI,oBAAC,IAAD;AACI,IAAA,UAAU,EAAEC,iBADhB;AAEI,IAAA,QAAQ,MAFZ;AAGI,IAAA,UAAU,EAAE,CAAC;AAACE,MAAAA,eAAD;AAAkBC,MAAAA,WAAlB;AAA+BC,MAAAA,oBAA/B;AAAqDC,MAAAA;AAArD,KAAD,kBACR,oBAAC,IAAD,CAAM,IAAN,qBACI,oBAAC,IAAD,CAAM,IAAN,CAAW,IAAX;AAAgB,MAAA,KAAK,EAAEF,WAAvB;AAAoC,MAAA,WAAW,EAAEE;AAAjD,MADJ,eAEI,oBAAC,KAAD,CAAO,KAAP;AAAa,MAAA,QAAQ,EAAGC,CAAD,IAAOL,kBAAkB,CAACC,eAAD,EAAkBI,CAAC,CAACC,MAAF,CAASC,KAA3B,CAAhD;AAAmF,MAAA,KAAK,EAAEJ;AAA1F,oBACI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAET,oBAAoB,CAACc;AAA1C,mBADJ,eAEI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAEd,oBAAoB,CAACe;AAA1C,mBAFJ,eAGI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAEf,oBAAoB,CAACgB;AAA1C,uBAHJ,CAFJ;AAJR,IADJ;AAgBH,CAnBD;;AAqBA,eAAeb,kBAAf","sourcesContent":["import React, {useContext} from 'react'\nimport {UserContext} from '../../../lib/UserProvider'\nimport QuizScreen from '../../OnboardingFlow/Designers/QuizScreen'\nimport {createUser} from '../../../lib/server'\nimport {User, DesignerDecisionTalk, EmployerDecisionHire, CommDesigner} from '../../../model/model'\nimport {Typography, List, Radio} from 'antd'\n\ninterface CommunicationsListProps {\n    communicationList: CommDesigner[]\n    updateDesignerText: (commId: string, update: DesignerDecisionTalk) => void\n}\n\nconst CommunicationsList: React.FC<CommunicationsListProps> = (props) => {\n    const {communicationList, updateDesignerText} = props\n\n    return (\n        <List\n            dataSource={communicationList}\n            bordered\n            renderItem={({communicationId, companyName, designerApprovedTalk, decision}) => (\n                <List.Item>\n                    <List.Item.Meta title={companyName} description={decision}/>\n                    <Radio.Group onChange={(e) => updateDesignerText(communicationId, e.target.value)} value={designerApprovedTalk}>\n                        <Radio.Button value={DesignerDecisionTalk.UNDECIDED}>Undecided</Radio.Button>\n                        <Radio.Button value={DesignerDecisionTalk.WILL_TALK}>Will Talk</Radio.Button>\n                        <Radio.Button value={DesignerDecisionTalk.WILL_NOT_TALK}>Will Not Talk</Radio.Button>\n                    </Radio.Group>\n                </List.Item>\n            )}\n        />\n    )\n}\n\nexport default CommunicationsList"]},"metadata":{},"sourceType":"module"}