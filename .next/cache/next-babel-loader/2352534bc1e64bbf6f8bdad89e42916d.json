{"ast":null,"code":"import React, { useState, useContext } from 'react';\nimport { OnboardNavbar } from './OnboardNavbar';\nimport { Container } from './Container';\nimport { Typography } from 'antd';\nimport { NavBarStatus } from '../model/model';\nimport FormPersonalData from './OnboardingFlow/Designers/FormPersonalData';\nimport FormBusinessData from './OnboardingFlow/Employers/FormBusinessData';\nimport QuizScreen from './OnboardingFlow/Designers/QuizScreen';\nimport Verification from './OnboardingFlow/Employers/Verification';\nimport EmployerDesigner from './OnboardingFlow/EmployerDesigner';\nimport styled from 'styled-components';\nimport { UserContext } from '../lib/UserProvider';\nimport { createUser, createEmployer } from '../lib/server';\nconst Title = styled(Typography.Title).withConfig({\n  displayName: \"Onboard__Title\",\n  componentId: \"sc-1f8dn92-0\"\n})([\"padding-top:15px;padding-bottom:35px;\"]);\nexport const Onboard = props => {\n  const [currentStep, changeStep] = useState(0);\n  const [navBarStatus, changeNavbarStatus] = useState(NavBarStatus.Undecided);\n  const {\n    changeUser\n  } = useContext(UserContext);\n\n  const updateUser = async updatedUser => {\n    changeUser(updatedUser);\n    await createUser(updatedUser);\n  };\n\n  const updateEmployer = async updatedUser => {\n    changeUser(updatedUser);\n    await createEmployer(updatedUser);\n  };\n\n  var currentForm;\n  var title;\n\n  switch (currentStep) {\n    case 0:\n      currentForm = /*#__PURE__*/React.createElement(EmployerDesigner, {\n        deleteUser: props.deleteUser,\n        changeNavbarStatus: newStatus => changeNavbarStatus(newStatus),\n        changeStep: change => changeStep(currentStep + change)\n      });\n      break;\n\n    case 1:\n      if (navBarStatus == NavBarStatus.Designer) {\n        currentForm = /*#__PURE__*/React.createElement(FormPersonalData, {\n          changeNavbarStatus: newStatus => changeNavbarStatus(newStatus),\n          changeStep: change => changeStep(currentStep + change),\n          changeCurrentUser: async user => await updateUser(user)\n        });\n      } else {\n        currentForm = /*#__PURE__*/React.createElement(FormBusinessData, {\n          changeNavbarStatus: newStatus => changeNavbarStatus(newStatus),\n          changeStep: change => changeStep(currentStep + change),\n          changeCurrentUser: async user => await updateEmployer(user)\n        });\n      }\n\n      break;\n\n    case 2:\n      if (navBarStatus == NavBarStatus.Designer) {\n        currentForm = /*#__PURE__*/React.createElement(QuizScreen, {\n          changeStep: change => changeStep(currentStep + change),\n          changeCurrentUser: async user => await updateUser(user)\n        });\n      } else {\n        currentForm = /*#__PURE__*/React.createElement(Verification, {\n          changeStep: change => changeStep(currentStep + change),\n          changeCurrentUser: async user => await updateEmployer(user)\n        });\n      }\n\n      break;\n  }\n\n  return /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(OnboardNavbar, {\n    status: navBarStatus,\n    currentStep: currentStep\n  }), /*#__PURE__*/React.createElement(Title, null, title), currentForm);\n};","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-client/components/Onboard.tsx"],"names":["React","useState","useContext","OnboardNavbar","Container","Typography","NavBarStatus","FormPersonalData","FormBusinessData","QuizScreen","Verification","EmployerDesigner","styled","UserContext","createUser","createEmployer","Title","Onboard","props","currentStep","changeStep","navBarStatus","changeNavbarStatus","Undecided","changeUser","updateUser","updatedUser","updateEmployer","currentForm","title","deleteUser","newStatus","change","Designer","user"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react'\nimport {OnboardNavbar} from './OnboardNavbar'\nimport {Container} from './Container'\nimport {Typography} from 'antd'\nimport {User, NavBarStatus} from '../model/model'\nimport FormPersonalData from './OnboardingFlow/Designers/FormPersonalData'\nimport FormBusinessData from './OnboardingFlow/Employers/FormBusinessData'\nimport QuizScreen from './OnboardingFlow/Designers/QuizScreen'\nimport Verification from './OnboardingFlow/Employers/Verification'\nimport EmployerDesigner from './OnboardingFlow/EmployerDesigner'\nimport styled from 'styled-components'\nimport {UserContext} from '../lib/UserProvider'\nimport {createUser, createEmployer} from '../lib/server'\n\nconst Title = styled(Typography.Title)`\n    padding-top: 15px;\n    padding-bottom: 35px;\n`\n\ninterface OnboardProps {\n    deleteUser: () => void\n}\n\nexport const Onboard: React.FC<OnboardProps> = props => {\n    const [currentStep, changeStep] = useState(0);\n    const [navBarStatus, changeNavbarStatus] = useState<NavBarStatus>(NavBarStatus.Undecided);\n    const {changeUser}  = useContext(UserContext)\n\n    const updateUser = async (updatedUser: User) => {\n        changeUser(updatedUser)\n        await createUser(updatedUser)\n    }\n\n    const updateEmployer = async (updatedUser: User) => {\n        changeUser(updatedUser)\n        await createEmployer(updatedUser)\n    }\n    var currentForm;\n    var title;\n    switch (currentStep) {\n        case 0:\n            currentForm = <EmployerDesigner \n                                    deleteUser={props.deleteUser}\n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}/>;\n            break;\n        case 1:\n            if (navBarStatus == NavBarStatus.Designer) {\n                currentForm = <FormPersonalData \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}\n                                    changeCurrentUser={async (user) => await updateUser(user)}/>;\n            } else {\n                currentForm = <FormBusinessData \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}\n                                    changeCurrentUser={async (user) => await updateEmployer(user)}/>;\n            }\n            break;\n        case 2:\n            if (navBarStatus == NavBarStatus.Designer) {\n                currentForm = <QuizScreen changeStep={(change) => changeStep(currentStep + change)}\n                                     changeCurrentUser={async (user) => await updateUser(user)}/>;\n            } else {\n                currentForm = <Verification changeStep={(change) => changeStep(currentStep + change)}\n                                     changeCurrentUser={async (user) => await updateEmployer(user)}/>;\n            }\n            break;\n    }\n\n    return (\n        <Container>\n            <OnboardNavbar status={navBarStatus} currentStep={currentStep}/>\n            <Title>{title}</Title>\n            {currentForm}\n        </Container>\n    );\n}"]},"metadata":{},"sourceType":"module"}