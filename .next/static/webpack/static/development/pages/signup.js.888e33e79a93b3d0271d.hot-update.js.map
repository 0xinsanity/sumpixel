{"version":3,"file":"static/webpack/static/development/pages/signup.js.888e33e79a93b3d0271d.hot-update.js","sources":["webpack:///./lib/UserProvider.tsx"],"sourcesContent":["import React, { Component, createContext } from \"react\";\nimport { myFirebase } from \"./firebase\";\nimport {User, Employer} from '../model/model'\nimport {getEmployer, getUser} from './server'\nimport Router from \"next/router\";\n\ninterface ContextProps {\n    currentUser: User | Employer | null,\n    changeUser: (newUser: User | Employer | null) => void\n}\n\nexport const UserContext = createContext<Partial<ContextProps>>({\n    currentUser: null,\n    changeUser: () => {}\n});\nclass UserProvider extends Component {\n  changeUser = (newUser: User | Employer | null) => {\n      this.setState({currentUser: newUser})\n  }\n\n  state = {\n    currentUser: null,\n    changeUser: this.changeUser\n  };\n\n  componentDidMount = () => {\n    myFirebase.auth().onAuthStateChanged(async (userAuth) => {\n        if (userAuth === null) {\n            return\n        }\n        const user = await getUser(userAuth.uid)\n        const employer = await getEmployer(userAuth.uid)\n\n        if (user['user_exists'] == undefined) {\n            this.changeUser(user as User)\n            Router.replace('/dashboard_user')\n        } else if (employer['employer_exists'] == undefined) {\n            this.changeUser(employer as Employer)\n            Router.push('/dashboard_employer')\n        } else {\n            // TODO: Find alternate way to wait until names are updated\n            // Works for both\n            setTimeout(() => {\n                this.changeUser({\n                    email: userAuth.email,\n                    id: userAuth.uid,\n                    firstName: userAuth.displayName.substr(0, userAuth.displayName.indexOf(' ')),\n                    lastName: userAuth.displayName.substr(userAuth.displayName.indexOf(' ')+1),\n                })\n            }, 1000)\n            \n        }\n    });\n  };\n  render() {\n    return (\n      <UserContext.Provider value={this.state}>\n        {this.props.children}\n      </UserContext.Provider>\n    );\n  }\n}\nexport default UserProvider;"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAOA;AACA;AACA;AAFA;AACA;AAGA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AACA;AAJA;AAMA;AACA;AAFA;AACA;AANA;AAWA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAEA;AACA;AACA;AAtCA;AACA;AAsCA;AACA;AACA;AAAA;AAIA;AACA;AA9CA;AACA;AA8CA;;;;A","sourceRoot":""}