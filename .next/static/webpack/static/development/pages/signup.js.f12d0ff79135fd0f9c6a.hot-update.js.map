{"version":3,"file":"static/webpack/static/development/pages/signup.js.f12d0ff79135fd0f9c6a.hot-update.js","sources":["webpack:///./components/Onboard.tsx","webpack:///./components/OnboardingFlow/Employers/FormBusinessData.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {OnboardNavbar} from './OnboardNavbar'\nimport {Container} from './Container'\nimport {Typography} from 'antd'\nimport {User, Employer, NavBarStatus} from '../model/model'\nimport {myFirebase} from \"../lib/firebase\";\nimport FormPersonalData from './OnboardingFlow/Designers/FormPersonalData'\nimport FormBusinessData from './OnboardingFlow/Employers/FormBusinessData'\nimport QuizScreen from './OnboardingFlow/Designers/QuizScreen'\nimport EmployerDesigner from './OnboardingFlow/EmployerDesigner'\nimport styled from 'styled-components'\nimport {getUser, createUser, createEmployer} from '../lib/server'\n\nconst Title = styled(Typography.Title)`\n    padding-top: 15px;\n    padding-bottom: 35px;\n`\n\nexport const Onboard: React.FC<{}> = props => {\n    const [currentStep, changeStep] = useState(0);\n    const [navBarStatus, changeNavbarStatus] = useState<NavBarStatus>(NavBarStatus.Undecided);\n    const [currentUser, changeUser] = useState<User | Employer | undefined>(undefined);\n\n    useEffect(() => {\n        async function findUser() {\n            const user = await getUser(firebaseUser.uid)\n\n            if (user['user_exists'] === undefined) {\n                changeUser(user as User);\n                changeStep(2)\n            } else {\n                changeUser({\n                    email: firebaseUser.email,\n                    id: firebaseUser.uid,\n                    firstName: firebaseUser.displayName.substr(0, firebaseUser.displayName.indexOf(' ')),\n                    lastName: firebaseUser.displayName.substr(firebaseUser.displayName.indexOf(' ')+1),\n                });\n            }\n        }\n\n        const firebaseUser = myFirebase.auth().currentUser;\n        if (firebaseUser !== null) {\n            findUser()\n        }\n    }, [myFirebase.auth().currentUser]);\n\n    const updateUser = async (updatedUser: User) => {\n        changeUser(updatedUser)\n        await createUser(updatedUser)\n    }\n\n    const updateEmployer = async (updatedUser: User) => {\n        changeUser(updatedUser)\n        await createEmployer(updatedUser)\n    }\n\n    var currentForm;\n    var title;\n    switch (currentStep) {\n        case 0:\n            currentForm = <EmployerDesigner \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}/>;\n            break;\n        case 1:\n            if (navBarStatus == NavBarStatus.Designer) {\n                currentForm = <FormPersonalData \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}\n                                    currentUser={currentUser}\n                                    changeCurrentUser={async (user) => await updateUser(user)}/>;\n            } else {\n                currentForm = <FormBusinessData \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}\n                                    currentUser={currentUser}\n                                    changeCurrentUser={async (user) => await updateUser(user)}/>;\n            }\n            break;\n        case 2:\n            if (navBarStatus == NavBarStatus.Employer) {\n                currentForm = <QuizScreen changeStep={(change) => changeStep(currentStep + change)}\n                                     currentUser={currentUser}\n                                     changeCurrentUser={async (user) => await updateUser(user)}/>;\n            } else {\n                currentForm = <Verification changeStep={(change) => changeStep(currentStep + change)}\n                                     currentUser={currentUser}\n                                     changeCurrentUser={async (user) => await updateUser(user)}/>;\n            }\n            break;\n    }\n\n    return (\n        <Container>\n            <OnboardNavbar status={navBarStatus} currentStep={currentStep}/>\n            <Title>{title}</Title>\n            {currentForm}\n        </Container>\n    );\n}","import React, {useState} from 'react'\nimport { Form, Input, Button, Checkbox, Row, Col, Select, Upload, message } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport _ from 'lodash'\nimport {User, VisaStatus, NavBarStatus} from '../../../model/model'\nimport FormProps from '../FormProps'\nimport {UploadFile} from 'antd/lib/upload/interface'\nimport {storage_ref, myFirebase} from '../../../lib/firebase'\nimport {removeUser} from '../../../lib/server'\nconst {Option} = Select\n\nconst FormBusinessData: React.FC<FormProps> = (props) => {\n    const {currentUser, changeCurrentUser, changeStep, changeNavbarStatus} = props\n    const [fileList, updateFileList] = useState<UploadFile[]>([])\n\n    const goBack = async () => {\n        await removeUser(currentUser.id)\n        await myFirebase.auth().signOut()\n        changeNavbarStatus(NavBarStatus.Undecided)\n        changeStep(-1)\n        \n    }\n\n    if (currentUser == undefined) {\n        return (<></>)\n    }\n\n    const onFinish = (values) => {\n        const res = values.resume.file\n        storage_ref.child('resumes/' + currentUser.id + '.pdf').put(res[\"originFileObj\"]).then((snapshot) => {\n            const newUser = {\n                email: currentUser.email,\n                id: currentUser.id,\n                firstName: currentUser.firstName,\n                lastName: currentUser.lastName,\n                phoneNumber: values.phoneNumber,\n                location: values.location,\n                salary: values.salary,\n                portfolio: values.portfolio,\n                preferredRole: values.preferredRole,\n                visa: values.visa_status,\n                resume: currentUser.id + '.pdf'\n            }\n            if (values.linkedin) {\n                newUser['linkedin'] = values.linkedin\n            }\n            if (values.dribbble) {\n                newUser['dribbble'] = values.dribbble\n            }\n            changeCurrentUser(newUser)\n            changeStep(1)\n        })\n    }\n\n    const onFinishFailed = () => {\n        message.error('There was an error completing your account. Ensure every field is filled out.')\n    }\n\n    return (\n        <Form\n            name=\"basic\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n            style={{marginBottom: 50}}\n        >\n            <Form.Item\n                label=\"Name\"\n                name=\"firstName\"\n            >\n                <Input.Group>\n                    <Row>\n                        <Col span={11}>\n                            <Input disabled defaultValue={currentUser.firstName}/>\n                        </Col>\n                        <Col span={2}/>\n                        <Col span={11}>\n                            <Input disabled defaultValue={currentUser.lastName}/>\n                        </Col>\n                    </Row>\n                </Input.Group>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Email\"\n                name=\"email\"\n            >\n                <Input disabled defaultValue={currentUser.email}/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Phone Number\"\n                name=\"phoneNumber\"\n                rules={[{ required: true, message: 'Phone Number is required' }]}\n            >\n                <Input defaultValue={currentUser.phoneNumber || \"\"} placeholder=\"+1 (555) 555-5555\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Location\"\n                name=\"location\"\n                rules={[{ required: true, message: 'Location is required' }]}\n            >\n                <Input defaultValue={currentUser.location || \"\"} placeholder=\"New York City\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Desired Salary\"\n                name=\"salary\"\n                rules={[{ required: true, message: 'Desired Salary is required'}]}\n            >\n                <Input defaultValue={currentUser.salary || \"\"} placeholder=\"$100,000-$150,000 per year\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Preferred Role\"\n                name=\"preferredRole\"\n                rules={[{ required: true, message: 'Preferred Role is required' }]}\n            >\n                <Input defaultValue={currentUser.preferredRole || \"\"} placeholder=\"UI/UX Designer\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Portfolio\"\n                name=\"portfolio\"\n                rules={[{ required: true, message: 'Portfolio is required' }]}\n            >\n                <Input defaultValue={currentUser.portfolio || \"\"} placeholder=\"https://www.myportfolio.com\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Resume\"\n                name=\"resume\"\n                rules={[{ required: true, message: 'Resume is required' }]}\n            >\n                <Upload \n                    name={'file'} \n                    accept={\".pdf\"} \n                    fileList={fileList}\n                    onChange={(info) => {\n                        let fileList_update = [...info.fileList];\n                        fileList_update = fileList_update.slice(-1);\n\n                        fileList_update = fileList_update.map(file => {\n                            if (file.response) {\n                                file.url = file.response.url;\n                            }\n                            return file;\n                        });\n\n                        if (info.file.status === 'done') {\n                            message.success(`${info.file.name} file uploaded successfully`);\n                        } else if (info.file.status === 'error') {\n                            message.error(`${info.file.name} file upload failed.`);\n                        }\n\n                        updateFileList(fileList_update)\n                    }}>\n                    <Button>\n                        <UploadOutlined /> Click to Upload\n                    </Button>\n                </Upload>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Visa Status\"\n                name=\"visa_status\"\n                rules={[{ required: true, message: 'Visa Status is required' }]}\n                \n            >\n                <Select defaultValue={currentUser.visa || \"\"} placeholder=\"Select an option:\">\n                    {_.map(VisaStatus, (status) => {\n                        return <Option value={status}>{status}</Option>\n                    })}\n                </Select>\n            </Form.Item>\n\n            <Form.Item\n                label=\"LinkedIn\"\n                name=\"linkedin\"\n            >\n                <Input defaultValue={currentUser.linkedin || \"\"} placeholder=\"https://www.linkedin.com/in/username\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Dribbble\"\n                name=\"dribbble\"\n            >\n                <Input defaultValue={currentUser.dribbble || \"\"} placeholder=\"https://dribbble.com/username\"/>\n            </Form.Item>\n\n            <Form.Item \n                rules={[{\n                    required: true,\n                    transform: value => (value || undefined),\n                    type: 'boolean',                          \n                    message: 'Please agree to the terms and conditions.',\n                }]}\n                valuePropName={'checked'}\n                >\n                    {/* TODO: Requirement Not Working */}\n                    <Checkbox>Agree to The Terms and Services</Checkbox>\n            </Form.Item>\n\n            <Form.Item>\n                <Row justify=\"space-between\" align=\"middle\">\n                    <Button type=\"default\" onClick={goBack}>\n                        Back\n                    </Button>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Take The Quiz\n                    </Button>\n                </Row>\n            </Form.Item>\n        </Form>\n    );\n}\n\nexport default FormBusinessData"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AAAA;AA/BA;AACA;AAiCA;AAEA;AAAA;AAAA;AAKA;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AACA;AAYA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAQA;AACA;AAFA;AAMA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAOA;AACA;AAFA;AAIA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AA8BA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAKA;AACA;AAFA;AAIA;AAAA;AAAA;AAIA;AACA;AAFA;AAIA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAPA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAOA;AACA;AACA;;;;A","sourceRoot":""}