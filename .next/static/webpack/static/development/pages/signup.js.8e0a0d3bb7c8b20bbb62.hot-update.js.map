{"version":3,"file":"static/webpack/static/development/pages/signup.js.8e0a0d3bb7c8b20bbb62.hot-update.js","sources":["webpack:///./components/OnboardingFlow/Onboard.tsx"],"sourcesContent":["import React, { useState, useContext } from 'react'\nimport {OnboardNavbar} from './OnboardNavbar'\nimport {Container} from '../General/Container'\nimport {Typography} from 'antd'\nimport {User, NavBarStatus} from '../../model/model'\nimport FormPersonalData from './Designers/FormPersonalData'\nimport FormBusinessData from './Employers/FormBusinessData'\nimport QuizScreen from './Designers/QuizScreen'\nimport Verification from './Employers/Verification'\nimport EmployerDesigner from './EmployerDesigner'\nimport styled from 'styled-components'\nimport {UserContext} from '../../lib/UserProvider'\nimport {createUser, createEmployer} from '../../lib/server'\nimport Router from 'next/router'\n\nconst Title = styled(Typography.Title)`\n    padding-top: 15px;\n    padding-bottom: 35px;\n`\n\ninterface OnboardProps {\n    deleteUser: () => void\n}\n\nexport const Onboard: React.FC<OnboardProps> = props => {\n    const [currentStep, changeStep] = useState(0);\n    const [navBarStatus, changeNavbarStatus] = useState<NavBarStatus>(NavBarStatus.Undecided);\n    const {currentUser, changeUser}  = useContext(UserContext)\n\n    const updateUser = async (updatedUser: User) => {\n        changeUser(updatedUser)\n        await createUser(updatedUser)\n    }\n\n    const updateEmployer = async (updatedUser: User) => {\n        changeUser(updatedUser)\n        await createEmployer(updatedUser)\n    }\n    var currentForm;\n    var title;\n    switch (currentStep) {\n        case 0:\n            currentForm = <EmployerDesigner \n                                    deleteUser={props.deleteUser}\n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}/>;\n            break;\n        case 1:\n            if (navBarStatus == NavBarStatus.Designer) {\n                currentForm = <FormPersonalData \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}\n                                    changeCurrentUser={async (user) => await updateUser(user)}/>;\n            } else {\n                currentForm = <FormBusinessData \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}\n                                    changeCurrentUser={async (user) => await updateEmployer(user)}/>;\n            }\n            break;\n        case 2:\n            if (navBarStatus == NavBarStatus.Designer) {\n                Router.push('/dashboard_user');\n            } else {\n                currentForm = <Verification changeStep={(change) => changeStep(currentStep + change)}\n                                     changeCurrentUser={async (user) => await updateEmployer(user)}/>;\n            }\n            break;\n    }\n\n    return (\n        <Container>\n            <OnboardNavbar status={navBarStatus} currentStep={currentStep}/>\n            <Title>{title}</Title>\n            {currentForm}\n        </Container>\n    );\n}"],"mappings":";;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AA3BA;AACA;AA6BA;AAEA;AAAA;AAAA;AAKA;;;;;;;A","sourceRoot":""}