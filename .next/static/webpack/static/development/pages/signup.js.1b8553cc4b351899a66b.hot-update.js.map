{"version":3,"file":"static/webpack/static/development/pages/signup.js.1b8553cc4b351899a66b.hot-update.js","sources":["webpack:///./components/Onboard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {OnboardNavbar} from './OnboardNavbar'\nimport {Container} from './Container'\nimport {Typography} from 'antd'\nimport {User, Employer, NavBarStatus} from '../model/model'\nimport {myFirebase} from \"../lib/firebase\";\nimport FormPersonalData from './OnboardingFlow/Designers/FormPersonalData'\nimport FormBusinessData from './OnboardingFlow/Employers/FormBusinessData'\nimport QuizScreen from './OnboardingFlow/Designers/QuizScreen'\nimport Verification from './OnboardingFlow/Employers/Verification'\nimport EmployerDesigner from './OnboardingFlow/EmployerDesigner'\nimport styled from 'styled-components'\nimport {getUser,getEmployer, createUser, createEmployer} from '../lib/server'\n\nconst Title = styled(Typography.Title)`\n    padding-top: 15px;\n    padding-bottom: 35px;\n`\n\nexport const Onboard: React.FC<{}> = props => {\n    const [currentStep, changeStep] = useState(0);\n    const [navBarStatus, changeNavbarStatus] = useState<NavBarStatus>(NavBarStatus.Undecided);\n    const [currentUser, changeUser] = useState<User | Employer | undefined>(undefined);\n\n    useEffect(() => {\n        async function findUser() {\n            const user = await getUser(firebaseUser.uid)\n            const employer = await getEmployer(firebaseUser.uid)\n\n            if (user['user_exists'] == undefined) {\n                changeUser(user as User);\n                changeStep(2)\n            } else if (employer['employer_exists'] == undefined) {\n                changeUser(employer as Employer);\n                changeStep(2)\n            } else {\n                // Works for both\n                changeUser({\n                    email: firebaseUser.email,\n                    id: firebaseUser.uid,\n                    firstName: firebaseUser.displayName.substr(0, firebaseUser.displayName.indexOf(' ')),\n                    lastName: firebaseUser.displayName.substr(firebaseUser.displayName.indexOf(' ')+1),\n                });\n            }\n        }\n\n        const firebaseUser = myFirebase.auth().currentUser;\n        if (firebaseUser !== null) {\n            findUser()\n        }\n    }, [myFirebase.auth().currentUser]);\n\n    const updateUser = async (updatedUser: User) => {\n        changeUser(updatedUser)\n        await createUser(updatedUser)\n    }\n\n    const updateEmployer = async (updatedUser: User) => {\n        changeUser(updatedUser)\n        await createEmployer(updatedUser)\n    }\n\n    var currentForm;\n    var title;\n    switch (currentStep) {\n        case 0:\n            currentForm = <EmployerDesigner \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}/>;\n            break;\n        case 1:\n            if (navBarStatus == NavBarStatus.Designer) {\n                currentForm = <FormPersonalData \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}\n                                    currentUser={currentUser}\n                                    changeCurrentUser={async (user) => await updateUser(user)}/>;\n            } else {\n                currentForm = <FormBusinessData \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}\n                                    currentUser={currentUser}\n                                    changeCurrentUser={async (user) => await updateEmployer(user)}/>;\n            }\n            break;\n        case 2:\n            if (navBarStatus == NavBarStatus.Designer) {\n                currentForm = <QuizScreen changeStep={(change) => changeStep(currentStep + change)}\n                                     currentUser={currentUser}\n                                     changeCurrentUser={async (user) => await updateUser(user)}/>;\n            } else {\n                currentForm = <Verification changeStep={(change) => changeStep(currentStep + change)}\n                                     currentUser={currentUser}\n                                     changeCurrentUser={async (user) => await updateEmployer(user)}/>;\n            }\n            break;\n    }\n\n    return (\n        <Container>\n            <OnboardNavbar status={navBarStatus} currentStep={currentStep}/>\n            <Title>{title}</Title>\n            {currentForm}\n        </Container>\n    );\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AACA;AAAA;AA/BA;AACA;AAiCA;AAEA;AAAA;AAAA;AAKA;;;;A","sourceRoot":""}