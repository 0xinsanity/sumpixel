{"version":3,"file":"static/webpack/static/development/pages/dashboard_user.js.9edeeb416aac6dfc5540.hot-update.js","sources":["webpack:///./components/OnboardingFlow/Designers/QuizScreen.tsx"],"sourcesContent":["import React, {useContext, useState } from 'react'\nimport { Form, Radio, Button, Checkbox, Row, Col, Select, Upload, message, Typography } from 'antd';\nimport _ from 'lodash'\nimport FormProps from '../FormProps'\nimport {removeUser, didCompleteQuiz} from '../../../lib/server'\nimport Router from 'next/router'\nimport {UserContext} from '../../../lib/UserProvider'\nimport { ReactTypeformEmbed } from 'react-typeform-embed';\nimport styled from 'styled-components'\n\nconst Cont = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 100%;\n    margin-top: 20px;\n    height: 70vh;\n`\n\ninterface QuizScreenProps extends FormProps {\n    isDashboard?: boolean\n}\n\ninterface QuizProp {\n    link: string, \n    name: string,\n    key: number\n}\n\nconst QuizScreen: React.FC<QuizScreenProps> = (props) => {\n    const {changeCurrentUser, changeStep, isDashboard} = props\n    const {currentUser}  = useContext(UserContext)\n\n    const designerTypes = [{key: 0, name: \"UI\", link: \"https://sumpixelbiz.typeform.com/to/riENWs?id=\" + currentUser.id}, \n                            {key: 1, name: \"UX\", link: \"https://sumpixelbiz.typeform.com/to/TqV8Jo?id=\" + currentUser.id}, \n                            {key: 2, name: \"Brand\", link: \"https://sumpixelbiz.typeform.com/to/BOBhxP?id=\" + currentUser.id}, \n                            {key: 3, name: \"Product\", link: \"https://sumpixelbiz.typeform.com/to/irGM8E?id=\" + currentUser.id}]\n\n    const [currentQuiz, changeQuiz] = useState<QuizProp>({key: 4, name: \"None\", link: \"\"})\n\n    const goBack = async () => {\n        await removeUser(currentUser.id)\n        changeStep(-1)\n    }\n\n    const onChange = (key: number) => {\n        changeQuiz(designerTypes[key])\n    }\n\n    const submit = () => {\n        currentUser[\"designType\"] = currentQuiz.name\n        currentUser[\"completedQuiz\"] = true\n        changeCurrentUser(currentUser)\n        Router.replace('/dashboard_user')\n    }\n\n    return (\n        <Cont>\n            <Typography.Title style={{textAlign: 'center'}} level={4}>\n                Choose a Design Type and Take Your Quiz!\n            </Typography.Title>\n            <Col style={{marginTop: 10, marginBottom: 20, display: 'flex', justifyContent: 'center'}}>\n                <Radio.Group onChange={(e) => onChange(e.target.value)} value={currentQuiz.key}>\n                    {_.map(designerTypes, (type: QuizProp) => {\n                        return <Radio.Button value={type.key}>{type.name}</Radio.Button>\n                    })}\n                </Radio.Group>\n                \n            </Col>\n            <ReactTypeformEmbed style={{position: 'relative'}}\n                                url={currentQuiz.link} \n                                onSubmit={submit}/>\n            {isDashboard === null ? \n                <Button style={{marginTop: 20}} type=\"default\" onClick={goBack}>\n                    Back\n                </Button> \n            : null}\n        </Cont>\n    );\n}\n\nexport default QuizScreen"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAAA;AACA;AAkBA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;A","sourceRoot":""}