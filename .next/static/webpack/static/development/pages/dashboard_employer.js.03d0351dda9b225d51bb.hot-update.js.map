{"version":3,"file":"static/webpack/static/development/pages/dashboard_employer.js.03d0351dda9b225d51bb.hot-update.js","sources":["webpack:///./components/Dashboard/Employer/EmployerCommList.tsx","webpack:///./components/Dashboard/Employer/ManageCommunications.tsx"],"sourcesContent":["import React, {useContext} from 'react'\nimport {UserContext} from '../../../lib/UserProvider'\nimport QuizScreen from '../../OnboardingFlow/Designers/QuizScreen'\nimport {createUser} from '../../../lib/server'\nimport {User, DesignerDecisionTalk, EmployerDecisionHire, CommForEmployer} from '../../../model/model'\nimport {Typography, List, Radio} from 'antd'\n\ninterface CommunicationsListProps {\n    communicationList: CommForEmployer[]\n    updateEmployerDecision: (commId: string, update: EmployerDecisionHire) => void\n}\n\nconst EmployerCommList: React.FC<CommunicationsListProps> = (props) => {\n    const {communicationList, updateEmployerDecision} = props\n\n    const decisionToText = (fullName: string, dec: DesignerDecisionTalk): string => {\n        switch (dec) {\n            case DesignerDecisionTalk.UNDECIDED:\n                return `${fullName} is reviewing your interest in them`\n            case DesignerDecisionTalk.WILL_TALK:\n                return `${fullName} wants to talk to you you`\n            case DesignerDecisionTalk.WILL_NOT_TALK:\n                return `${fullName} is not interested in your offer`\n        }\n    }\n\n    return (\n        <List\n            style={{width: '100%'}}\n            dataSource={communicationList}\n            bordered\n            renderItem={({communicationId, fullName, designerApprovedTalk, decision}) => (\n                <List.Item>\n                    <List.Item.Meta title={fullName} description={decisionToText(fullName, designerApprovedTalk)}/>\n                    <Radio.Group onChange={(e) => updateEmployerDecision(communicationId, e.target.value)} value={decision}>\n                        <Radio.Button value={EmployerDecisionHire.UNDECIDED}>Undecided</Radio.Button>\n                        <Radio.Button value={EmployerDecisionHire.REJECT}>Reject</Radio.Button>\n                        <Radio.Button value={EmployerDecisionHire.HIRE}>Hire</Radio.Button>\n                    </Radio.Group>\n                </List.Item>\n            )}\n        />\n    )\n}\n\nexport default EmployerCommList","import React, {useContext, useState, useEffect} from 'react'\nimport {UserContext} from '../../../lib/UserProvider'\nimport { CommForEmployer, EmployerDecisionHire } from '../../../model/model'\nimport { modifyEmployer, getEmployerCommunicationsList } from '../../../lib/server'\nimport {message} from 'antd'\nimport {Employer} from '../../../model/model'\nimport EmployerCommList from './EmployerCommList'\n\nconst ManageCommunications: React.FC = (props) => {\n    const {currentUser, changeUser}  = useContext(UserContext)\n    const [commList, setCommList] = useState<CommForEmployer[] | undefined>(undefined)\n\n    const updateEmployerDecision = async (commId: string, update: EmployerDecisionHire) => {\n        await updateEmployerDecision(commId, update)\n        message.success(\"Updated Decision\")\n        setCommList(await getEmployerCommunicationsList(currentUser.id))\n    }\n\n    useEffect(() => {\n        getEmployerCommunicationsList(currentUser.id).then((commList: CommForEmployer[]) => {\n            setCommList(commList)\n        })\n    }, [])\n\n    return (<EmployerCommList communicationList={commList} updateEmployerDecision={updateEmployerDecision}/>)\n}\n\nexport default ManageCommunications"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAVA;AAgBA;AACA;AACA;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}