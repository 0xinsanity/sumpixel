{"version":3,"file":"static/webpack/static/development/pages/signup.js.dd6e249d49c8068a3885.hot-update.js","sources":["webpack:///./components/OnboardingFlow/Employers/Verification.tsx","webpack:///./lib/server.tsx"],"sourcesContent":["import React, {useEffect} from 'react'\nimport { Form, Input, Button, Checkbox, Row, Col, Select, Upload, message, Typography } from 'antd';\nimport _ from 'lodash'\nimport FormProps from '../FormProps'\nimport {removeEmployer, didCompleteQuiz} from '../../../lib/server'\nimport Router from 'next/router'\n\nconst Verification: React.FC<FormProps> = (props) => {\n    const {currentUser, changeStep} = props\n\n    useEffect(() => {\n        async function findUser() {\n            const user = await didCompleteQuiz(currentUser.id)\n\n            if (user['completed_quiz']) {\n                Router.replace('/dashboard_user')\n            }\n        }\n        findUser()\n    }, []);\n\n    const goBack = async () => {\n        await removeEmployer(currentUser.id)\n        changeStep(-1)\n    }\n\n    return (\n        <>\n            \n            <Button style={{marginTop: 20}} type=\"default\" onClick={goBack}>\n                Back\n            </Button>\n        </>\n    );\n}\n\nexport default Verification","import { User, Employer } from \"../model/model\";\nimport axios from 'axios';\n\nconst SERVER_BASE = 'https://sumpixel-server.herokuapp.com/'\n\nenum HTTP_Requests {\n    GET = 'GET',\n    POST = 'POST'\n}\n\nconst request = async (url: string, params, method: HTTP_Requests = HTTP_Requests.GET) => {\n    var response;\n    switch (method) {\n        case HTTP_Requests.GET:\n            response = await axios.get(SERVER_BASE + url, {params: params});\n            break;\n        case HTTP_Requests.POST:\n            response = await axios.post(SERVER_BASE + url, params);\n            break;\n    }\n\n    if (response.status !== 200) {\n        return generateErrorResponse('The server responded with an unexpected status.');\n    }\n\n    const result = response.data;\n\n    return result;\n\n}\n\nconst objectToQueryString = (obj) => {\n    return Object.keys(obj).map(key => key + '=' + obj[key]).join('&');\n}\n\nconst generateErrorResponse = (message) => {\n    return {\n        status : 'error',\n        message\n    };\n}\n\nexport const didCompleteQuiz = async (id: string) => {\n    return await request('user-finished-quiz', {id: id})\n}\n\nexport const getUser = async (id: string): Promise<User | {user_exists: boolean}> => {\n    return await request('get-user', {id: id})\n}\n\nexport const getEmployer = async (id: string): Promise<Employer | {user_exists: boolean}> => {\n    return await request('get-employer', {id: id})\n}\n\nexport const removeUser = async (id: string) => {\n    return await request('remove-user', {id: id})\n}\n\nexport const removeEmployer = async (id: string) => {\n    return await request('remove-employer', {id: id})\n}\n\nexport const createUser = async (user: User) => {\n    return await request('create-user', user, HTTP_Requests.POST)\n}\n\nexport const createEmployer = async (employer: Employer) => {\n    return await request('create-employer', employer, HTTP_Requests.POST)\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;A","sourceRoot":""}