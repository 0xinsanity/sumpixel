{"version":3,"file":"static/webpack/static/development/pages/signup.js.d9c2a915794d2c3da8db.hot-update.js","sources":["webpack:///./components/Onboard.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {OnboardNavbar, NavBarStatus} from './OnboardNavbar'\nimport {Container} from './Container'\nimport {Typography} from 'antd'\nimport {User} from '../model/model'\nimport {myFirebase} from \"../lib/firebase\";\nimport FormPersonalData from './OnboardingFlow/FormPersonalData'\nimport QuizScreen from './OnboardingFlow/QuizScreen'\nimport EmployerDesigner from './OnboardingFlow/EmployerDesigner'\nimport styled from 'styled-components'\nimport {getUser, createUser} from '../lib/server'\n\nconst Title = styled(Typography.Title)`\n    padding-top: 15px;\n    padding-bottom: 35px;\n`\n\nexport const Onboard: React.FC<{}> = props => {\n    const [currentStep, changeStep] = useState(0);\n    const [navBarStatus, changeNavbarStatus] = useState<NavBarStatus>(NavBarStatus.Undecided);\n    const [currentUser, changeUser] = useState<User | undefined>(undefined);\n\n    useEffect(() => {\n        async function findUser() {\n            const user = await getUser(firebaseUser.uid)\n\n            if (user['user_exists'] === undefined) {\n                changeUser(user as User);\n                changeStep(2)\n            } else {\n                changeUser({\n                    email: firebaseUser.email,\n                    id: firebaseUser.uid,\n                    firstName: firebaseUser.displayName.substr(0, firebaseUser.displayName.indexOf(' ')),\n                    lastName: firebaseUser.displayName.substr(firebaseUser.displayName.indexOf(' ')+1),\n                });\n            }\n        }\n\n        const firebaseUser = myFirebase.auth().currentUser;\n        if (firebaseUser !== null) {\n            findUser()\n        }\n    }, [myFirebase.auth().currentUser]);\n\n    const updateUser = async (updatedUser: User) => {\n        changeUser(updatedUser)\n        await createUser(updatedUser)\n    }\n\n    var currentForm;\n    var title;\n    switch (currentStep) {\n        case 0:\n            currentForm = <EmployerDesigner \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}\n                                    currentUser={currentUser}\n                                    changeCurrentUser={async (user) => await updateUser(user)}/>;\n            break;\n        case 1:\n            currentForm = <FormPersonalData \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}\n                                    currentUser={currentUser}\n                                    changeCurrentUser={async (user) => await updateUser(user)}/>;\n            break;\n        case 2:\n            currentForm = <QuizScreen changeStep={(change) => changeStep(currentStep + change)}\n                                 currentUser={currentUser}\n                                 changeCurrentUser={async (user) => await updateUser(user)}/>;\n            break;\n    }\n\n    return (\n        <Container>\n            <OnboardNavbar  currentStep={currentStep} steps={TOTAL_STEPS}/>\n            <Title>{title}</Title>\n            {currentForm}\n        </Container>\n    );\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAGA;AAnBA;AACA;AAqBA;AAEA;AAAA;AAAA;AAKA;;;;A","sourceRoot":""}