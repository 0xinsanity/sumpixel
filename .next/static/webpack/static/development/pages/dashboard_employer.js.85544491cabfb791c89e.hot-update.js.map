{"version":3,"file":"static/webpack/static/development/pages/dashboard_employer.js.85544491cabfb791c89e.hot-update.js","sources":["webpack:///./components/Dashboard/Employer/DesignerList.tsx","webpack:///./components/Dashboard/Employer/FindDesigners.tsx"],"sourcesContent":["import React, {useEffect, useContext, useState} from 'react'\nimport { getGradedDesigners } from '../../../lib/server'\nimport { UserAndGrade } from '../../../model/model'\nimport {UserContext} from '../../../lib/UserProvider'\nimport Loading from '../../General/Loading'\nimport {List, Radio} from 'antd'\n\ninterface DesignerListProps {\n    designerList: UserAndGrade[]\n}\n\nconst DesignerList: React.FC<DesignerListProps> = (props) => {\n    const {designerList} = props\n    \n\n    return (\n        <List\n            style={{width: '100%'}}\n            dataSource={designerList}\n            bordered\n            renderItem={({communicationId, companyName, designerApprovedTalk, decision}) => (\n                <List.Item>\n                    <List.Item.Meta title={companyName} description={decisionToText(companyName, decision)}/>\n                    <Radio.Group onChange={(e) => updateDesignerText(communicationId, e.target.value)} value={designerApprovedTalk}>\n                        <Radio.Button value={DesignerDecisionTalk.UNDECIDED}>Undecided</Radio.Button>\n                        <Radio.Button value={DesignerDecisionTalk.WILL_TALK}>Will Talk</Radio.Button>\n                        <Radio.Button value={DesignerDecisionTalk.WILL_NOT_TALK}>Will Not Talk</Radio.Button>\n                    </Radio.Group>\n                </List.Item>\n            )}\n        />)\n}\n\nexport default DesignerList","import React, {useEffect, useContext, useState} from 'react'\nimport { getGradedDesigners } from '../../../lib/server'\nimport { UserAndGrade } from '../../../model/model'\nimport {UserContext} from '../../../lib/UserProvider'\nimport Loading from '../../General/Loading'\nimport DesignerList from './DesignerList'\n\nconst FindDesigners: React.FC = (props) => {\n    const {currentUser, changeUser}  = useContext(UserContext)\n    const [designerList, setDesignerList] = useState<UserAndGrade[] | undefined>(undefined)\n\n    useEffect(() => {\n        getGradedDesigners(currentUser.id).then((commList: UserAndGrade[]) => {\n            setDesignerList(commList)\n        })\n    }, [])\n\n    const updateDecision = () => {\n\n    }\n\n    if (designerList === undefined) {\n        return (<Loading />)\n    }\n\n    return (<DesignerList designerList={designerList}/>)\n}\n\nexport default FindDesigners"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAKA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAVA;AAeA;AACA;AACA;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}