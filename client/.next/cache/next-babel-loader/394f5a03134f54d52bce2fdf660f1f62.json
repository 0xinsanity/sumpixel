{"ast":null,"code":"import React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Radio, Col, Typography } from 'antd';\nimport _ from 'lodash';\nimport { RButton } from '../EmployerDesigner';\nimport Router from 'next/router';\nimport { UserContext } from '../../../lib/UserProvider';\nimport styled from 'styled-components';\nimport * as typeformEmbed from '@typeform/embed';\nconst Cont = styled.div.withConfig({\n  displayName: \"QuizScreen__Cont\",\n  componentId: \"sc-1ozrf5h-0\"\n})([\"display:flex;flex-direction:column;justify-content:center;width:100%;margin-top:20px;height:60vh;\"]);\n\nconst QuizScreen = props => {\n  const {\n    changeCurrentUser\n  } = props;\n  const {\n    currentUser\n  } = useContext(UserContext);\n  var typeform = useRef(null);\n  const designerTypes = [{\n    key: 0,\n    name: \"UI\",\n    link: \"https://sumpixelbiz.typeform.com/to/riENWs?id=\" + currentUser.id\n  }, {\n    key: 1,\n    name: \"UX\",\n    link: \"https://sumpixelbiz.typeform.com/to/TqV8Jo?id=\" + currentUser.id\n  }, {\n    key: 2,\n    name: \"Brand\",\n    link: \"https://sumpixelbiz.typeform.com/to/BOBhxP?id=\" + currentUser.id\n  }, {\n    key: 3,\n    name: \"Product\",\n    link: \"https://sumpixelbiz.typeform.com/to/irGM8E?id=\" + currentUser.id\n  }];\n  const [currentQuiz, changeQuiz] = useState(designerTypes[0]);\n\n  const submit = () => {\n    window.analytics.track('Completed Quiz');\n    currentUser[\"designType\"] = currentQuiz.name;\n    currentUser[\"completedQuiz\"] = true;\n    changeCurrentUser(currentUser);\n    Router.replace('/dashboard_user');\n  };\n\n  useEffect(() => {\n    if (typeform) {\n      typeformEmbed.makeWidget(typeform.current, currentQuiz.link, {\n        hideFooter: true,\n        hideHeaders: true,\n        opacity: 1,\n        onSubmit: submit\n      });\n    }\n  }, [currentQuiz]);\n\n  const onChange = key => {\n    changeQuiz(designerTypes[key]);\n  };\n\n  return /*#__PURE__*/React.createElement(Cont, null, /*#__PURE__*/React.createElement(Typography.Title, {\n    style: {\n      textAlign: 'center',\n      fontFamily: 'Mark Pro'\n    },\n    level: 4\n  }, \"Choose a Design Type and Take Your Quiz!\"), /*#__PURE__*/React.createElement(Col, {\n    style: {\n      marginTop: 10,\n      marginBottom: 20,\n      display: 'flex',\n      justifyContent: 'center'\n    }\n  }, /*#__PURE__*/React.createElement(Radio.Group, {\n    onChange: e => onChange(e.target.value),\n    value: currentQuiz.key\n  }, _.map(designerTypes, type => {\n    return /*#__PURE__*/React.createElement(RButton, {\n      style: {\n        fontSize: 14,\n        padding: 0\n      },\n      value: type.key\n    }, type.name);\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'relative',\n      width: '100%',\n      height: '100%'\n    },\n    ref: typeform\n  }));\n};\n\nexport default QuizScreen;","map":{"version":3,"sources":["/Users/insanity/Documents/Sumpixel/sumpixel/client/components/OnboardingFlow/Designers/QuizScreen.tsx"],"names":["React","useContext","useState","useEffect","useRef","Radio","Col","Typography","_","RButton","Router","UserContext","styled","typeformEmbed","Cont","div","QuizScreen","props","changeCurrentUser","currentUser","typeform","designerTypes","key","name","link","id","currentQuiz","changeQuiz","submit","window","analytics","track","replace","makeWidget","current","hideFooter","hideHeaders","opacity","onSubmit","onChange","textAlign","fontFamily","marginTop","marginBottom","display","justifyContent","e","target","value","map","type","fontSize","padding","position","width","height"],"mappings":"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","sourcesContent":["import React, {useContext, useState, useEffect, useRef } from 'react'\nimport { Form, Radio, Button, Checkbox, Row, Col, Select, Upload, message, Typography } from 'antd';\nimport _ from 'lodash'\nimport FormProps from '../FormProps'\nimport {removeUser} from '../../../lib/server'\nimport {RButton} from '../EmployerDesigner'\nimport Router from 'next/router'\nimport {UserContext} from '../../../lib/UserProvider'\nimport styled from 'styled-components'\nimport * as typeformEmbed from '@typeform/embed'\n\nconst Cont = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 100%;\n    margin-top: 20px;\n    height: 60vh;\n`\n\ninterface QuizProp {\n    link: string, \n    name: string,\n    key: number\n}\n\nconst QuizScreen: React.FC<FormProps> = (props) => {\n    const {changeCurrentUser} = props\n    const {currentUser}  = useContext(UserContext)\n    var typeform = useRef(null)\n\n    const designerTypes = [{key: 0, name: \"UI\", link: \"https://sumpixelbiz.typeform.com/to/riENWs?id=\" + currentUser.id}, \n                            {key: 1, name: \"UX\", link: \"https://sumpixelbiz.typeform.com/to/TqV8Jo?id=\" + currentUser.id}, \n                            {key: 2, name: \"Brand\", link: \"https://sumpixelbiz.typeform.com/to/BOBhxP?id=\" + currentUser.id}, \n                            {key: 3, name: \"Product\", link: \"https://sumpixelbiz.typeform.com/to/irGM8E?id=\" + currentUser.id}]\n\n    const [currentQuiz, changeQuiz] = useState<QuizProp>(designerTypes[0])\n\n    const submit = () => {\n        window.analytics.track('Completed Quiz');\n        currentUser[\"designType\"] = currentQuiz.name\n        currentUser[\"completedQuiz\"] = true\n        changeCurrentUser(currentUser)\n        Router.replace('/dashboard_user')\n    }\n\n    useEffect(() => {\n        if (typeform) {\n            typeformEmbed.makeWidget(typeform.current, currentQuiz.link, {\n                hideFooter: true,\n                hideHeaders: true,\n                opacity: 1,\n                onSubmit: submit\n            });\n        }\n    }, [currentQuiz])\n\n    const onChange = (key: number) => {\n        changeQuiz(designerTypes[key])\n    }\n\n    return (\n        <Cont>\n            <Typography.Title style={{textAlign: 'center', fontFamily: 'Mark Pro'}} level={4}>\n                Choose a Design Type and Take Your Quiz!\n            </Typography.Title>\n            <Col style={{marginTop: 10, marginBottom: 20, display: 'flex', justifyContent: 'center'}}>\n                <Radio.Group onChange={(e) => onChange(e.target.value)} value={currentQuiz.key}>\n                    {_.map(designerTypes, (type: QuizProp) => {\n                        return <RButton style={{fontSize: 14, \n                                            padding: 0}} value={type.key}>{type.name}</RButton>\n                    })}\n                </Radio.Group>\n                \n            </Col>\n            <div style={{position: 'relative', width: '100%', height: '100%'}} ref={typeform}/>\n        </Cont>\n    );\n}\n\nexport default QuizScreen"]},"metadata":{},"sourceType":"module"}