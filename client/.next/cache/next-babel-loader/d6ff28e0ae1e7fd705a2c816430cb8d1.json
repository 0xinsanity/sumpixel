{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { PopupModal } from '../components/PopupModal';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport { myFirebase } from '../lib/firebase';\nimport { Onboard } from '../components/onboard';\nimport firebase from 'firebase';\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"uiConfig\", {\n      // Popup signin flow rather than redirect flow.\n      signInFlow: 'popup',\n      // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n      callbacks: {\n        signInSuccessWithAuthResult: () => false\n      },\n      // We will display Google and Facebook as auth providers.\n      signInOptions: [firebase.auth.EmailAuthProvider.PROVIDER_ID]\n    });\n\n    this.state = {\n      isSignedIn: false\n    };\n    this.unregisterAuthObserver = this.unregisterAuthObserver.bind(this);\n  }\n\n  componentDidMount() {\n    this.unregisterAuthObserver = myFirebase.auth().onAuthStateChanged(user => {\n      console.log('user signed in');\n      this.setState({\n        isSignedIn: user !== null\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(PopupModal, {\n      visible: !this.state.isSignedIn\n    }, /*#__PURE__*/React.createElement(StyledFirebaseAuth, {\n      uiConfig: this.uiConfig,\n      firebaseAuth: myFirebase.auth()\n    })), /*#__PURE__*/React.createElement(Onboard, null));\n  }\n\n}","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-onboarding/pages/index.tsx"],"names":["React","PopupModal","StyledFirebaseAuth","myFirebase","Onboard","firebase","Index","Component","constructor","props","signInFlow","callbacks","signInSuccessWithAuthResult","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","state","isSignedIn","unregisterAuthObserver","bind","componentDidMount","onAuthStateChanged","user","console","log","setState","componentWillUnmount","render","uiConfig"],"mappings":";;AAAA,OAAOA,KAAP,MAAyC,OAAzC;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,SAAQC,UAAR,QAAyB,iBAAzB;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAMA,eAAe,MAAMC,KAAN,SAAoBN,KAAK,CAACO,SAA1B,CAAoD;AAC/DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,sCASR;AACP;AACAC,MAAAA,UAAU,EAAE,OAFL;AAGP;AACAC,MAAAA,SAAS,EAAE;AACPC,QAAAA,2BAA2B,EAAE,MAAM;AAD5B,OAJJ;AAOP;AACAC,MAAAA,aAAa,EAAE,CACXR,QAAQ,CAACS,IAAT,CAAcC,iBAAd,CAAgCC,WADrB;AARR,KATQ;;AAEf,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE;AADH,KAAb;AAIA,SAAKC,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BC,IAA5B,CAAiC,IAAjC,CAA9B;AACH;;AAeDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKF,sBAAL,GAA8BhB,UAAU,CAACW,IAAX,GAAkBQ,kBAAlB,CACzBC,IAAD,IAAU;AACNC,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,WAAKC,QAAL,CAAc;AAACR,QAAAA,UAAU,EAAEK,IAAI,KAAK;AAAtB,OAAd;AACH,KAJyB,CAA9B;AAMH;;AAEDI,EAAAA,oBAAoB,GAAG;AACnB,SAAKR,sBAAL;AACH;;AAEDS,EAAAA,MAAM,GAAG;AACL,wBACI,8CACI,oBAAC,UAAD;AACI,MAAA,OAAO,EAAE,CAAC,KAAKX,KAAL,CAAWC;AADzB,oBAGI,oBAAC,kBAAD;AACI,MAAA,QAAQ,EAAE,KAAKW,QADnB;AAEI,MAAA,YAAY,EAAE1B,UAAU,CAACW,IAAX;AAFlB,MAHJ,CADJ,eAQI,oBAAC,OAAD,OARJ,CADJ;AAYH;;AAjD8D","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {PopupModal} from '../components/PopupModal';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport {myFirebase} from '../lib/firebase'\nimport {Onboard} from '../components/onboard'\nimport firebase from 'firebase'\n\ninterface IndexState {\n    isSignedIn: boolean\n}\n\nexport default class Index extends React.Component<{}, IndexState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSignedIn: false\n        };\n\n        this.unregisterAuthObserver = this.unregisterAuthObserver.bind(this)\n    }\n\n    uiConfig = {\n        // Popup signin flow rather than redirect flow.\n        signInFlow: 'popup',\n        // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n        callbacks: {\n            signInSuccessWithAuthResult: () => false\n        },\n        // We will display Google and Facebook as auth providers.\n        signInOptions: [\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ]\n    };\n\n    componentDidMount() {\n        this.unregisterAuthObserver = myFirebase.auth().onAuthStateChanged(\n            (user) => {\n                console.log('user signed in')\n                this.setState({isSignedIn: user !== null})\n            }\n        );\n    }\n\n    componentWillUnmount() {\n        this.unregisterAuthObserver()\n    }\n\n    render() {\n        return (\n            <div>\n                <PopupModal\n                    visible={!this.state.isSignedIn}\n                >\n                    <StyledFirebaseAuth\n                        uiConfig={this.uiConfig}\n                        firebaseAuth={myFirebase.auth()}/>\n                </PopupModal>\n                <Onboard/>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}