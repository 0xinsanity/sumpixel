{"ast":null,"code":"import { SitemapStream, streamToPromise, EnumChangefreq } from 'sitemap';\nimport { createGzip } from 'zlib';\nexport default (async (req, res) => {\n  if (!res) return {};\n\n  try {\n    // Set response header \n    res.setHeader('content-type', 'application/xml');\n    res.setHeader('Content-Encoding', 'gzip'); // A Transform for turning a Readable stream of either SitemapItemOptions or url strings into a Sitemap.\n    // The readable stream it transforms must be in object mode.\n\n    const smStream = new SitemapStream({\n      hostname: 'https://app.sumpixel.com'\n    });\n    const pipeline = smStream.pipe(createGzip()); // Add any static entries here\n\n    smStream.write({\n      url: '/',\n      lastmod: process.env.siteUpdatedAt,\n      changefreq: EnumChangefreq.MONTHLY\n    });\n    smStream.write({\n      url: '/signup',\n      lastmod: process.env.siteUpdatedAt,\n      changefreq: EnumChangefreq.MONTHLY\n    });\n    smStream.write({\n      url: '/onboarding',\n      lastmod: process.env.siteUpdatedAt,\n      changefreq: EnumChangefreq.MONTHLY\n    });\n    smStream.write({\n      url: '/forgotpassword',\n      lastmod: process.env.siteUpdatedAt,\n      changefreq: EnumChangefreq.MONTHLY\n    });\n    smStream.write({\n      url: '/terms',\n      lastmod: process.env.siteUpdatedAt,\n      changefreq: EnumChangefreq.MONTHLY\n    });\n    smStream.write({\n      url: '/dashboard_user',\n      lastmod: process.env.siteUpdatedAt,\n      changefreq: EnumChangefreq.WEEKLY\n    });\n    smStream.write({\n      url: '/dashboard_employer',\n      lastmod: process.env.siteUpdatedAt,\n      changefreq: EnumChangefreq.WEEKLY\n    }); // E.g. we create a sitemap.xml for articles\n    // Set articles change frequencey is weekly\n\n    ids.map(id => {\n      smStream.write({\n        url: `/profile/${id}`,\n        changefreq: EnumChangefreq.WEEKLY\n      });\n    });\n    smStream.end(); // cache the response\n    // streamToPromise.then(sm => sitemap = sm)\n\n    streamToPromise(pipeline); // stream the response\n\n    pipeline.pipe(res).on('error', e => {\n      throw e;\n    });\n  } catch (e) {\n    res.status(500).end();\n  }\n});","map":{"version":3,"sources":["/Users/insanity/Documents/Sumpixel/sumpixel/client/pages/sitemap.xml.tsx"],"names":["SitemapStream","streamToPromise","EnumChangefreq","createGzip","req","res","setHeader","smStream","hostname","pipeline","pipe","write","url","lastmod","process","env","siteUpdatedAt","changefreq","MONTHLY","WEEKLY","ids","map","id","end","on","e","status"],"mappings":"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","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next';\nimport { SitemapStream, streamToPromise, EnumChangefreq } from 'sitemap';\nimport { createGzip } from 'zlib';\nimport {getUserIds} from '../lib/server'\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n\tif (!res) return {};\n\ttry {\n\t    // Set response header \n\t\tres.setHeader('content-type', 'application/xml');\n\t\tres.setHeader('Content-Encoding', 'gzip');\n\t\t\n\t\t// A Transform for turning a Readable stream of either SitemapItemOptions or url strings into a Sitemap.\n\t\t// The readable stream it transforms must be in object mode.\n\t\tconst smStream = new SitemapStream({\n\t\t\thostname: 'https://app.sumpixel.com',\n\t\t});\n\t\t\n\t\tconst pipeline = smStream.pipe(createGzip());\n\t\t// Add any static entries here\n\t\tsmStream.write({ url: '/', lastmod: process.env.siteUpdatedAt, changefreq: EnumChangefreq.MONTHLY });\n\t\tsmStream.write({ url: '/signup', lastmod: process.env.siteUpdatedAt, changefreq: EnumChangefreq.MONTHLY });\n\t\tsmStream.write({ url: '/onboarding', lastmod: process.env.siteUpdatedAt, changefreq: EnumChangefreq.MONTHLY });\n\t\tsmStream.write({ url: '/forgotpassword', lastmod: process.env.siteUpdatedAt, changefreq: EnumChangefreq.MONTHLY });\n\t\tsmStream.write({ url: '/terms', lastmod: process.env.siteUpdatedAt, changefreq: EnumChangefreq.MONTHLY });\n\t\tsmStream.write({ url: '/dashboard_user', lastmod: process.env.siteUpdatedAt, changefreq: EnumChangefreq.WEEKLY });\n\t\tsmStream.write({ url: '/dashboard_employer', lastmod: process.env.siteUpdatedAt, changefreq: EnumChangefreq.WEEKLY });\n\t\t// E.g. we create a sitemap.xml for articles\n\t\t// Set articles change frequencey is weekly\n\t\tids.map(id => {\n\t\t\tsmStream.write({\n\t\t\t\turl: `/profile/${id}`,\n\t\t\t\tchangefreq: EnumChangefreq.WEEKLY,\n\t\t\t});\n\t\t});\n\t\tsmStream.end();\n\n\t\t// cache the response\n\t\t// streamToPromise.then(sm => sitemap = sm)\n\t\tstreamToPromise(pipeline);\n\t\t// stream the response\n\t\tpipeline.pipe(res).on('error', e => {\n\t\t\tthrow e;\n\t\t});\n\t} catch (e) {\n\t\tres.status(500).end();\n\t}\n};"]},"metadata":{},"sourceType":"module"}