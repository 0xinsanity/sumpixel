{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport PlacesAutocomplete from \"react-places-autocomplete\";\nimport { Input, Form } from 'antd';\nimport React from 'react';\nexport const LocationAutocomplete = props => {\n  return /*#__PURE__*/React.createElement(Form.Item, {\n    label: \"Location\",\n    name: \"location\",\n    rules: [{\n      required: !props.isModifyProfilePage,\n      message: !props.isModifyProfilePage ? `Location is required` : ''\n    }]\n  }, /*#__PURE__*/React.createElement(PlacesAutocomplete, null, ({\n    getInputProps,\n    getSuggestionItemProps,\n    suggestions,\n    loading\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, _extends({}, getInputProps({\n    id: \"address-input\"\n  }), {\n    defaultValue: props.defaultValue,\n    placeholder: \"New York City\"\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"autocomplete-dropdown-container\"\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", null, \"Loading...\") : null, suggestions.map(suggestion => {\n    const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\";\n    const style = suggestion.active ? {\n      backgroundColor: \"#fafafa\",\n      cursor: \"pointer\",\n      padding: 25\n    } : {\n      backgroundColor: \"#ffffff\",\n      cursor: \"pointer\"\n    };\n    const spread = { ...getSuggestionItemProps(suggestion, {\n        className,\n        style\n      })\n    };\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, spread, {\n      key: suggestion.id\n    }), /*#__PURE__*/React.createElement(\"div\", null, suggestion.description));\n  })))));\n};","map":{"version":3,"sources":["/Users/insanity/Documents/Sumpixel/sumpixel/client/components/General/LocationAutocomplete.tsx"],"names":["PlacesAutocomplete","Input","Form","React","LocationAutocomplete","props","required","isModifyProfilePage","message","getInputProps","getSuggestionItemProps","suggestions","loading","id","defaultValue","map","suggestion","className","active","style","backgroundColor","cursor","padding","spread","description"],"mappings":";;AAAA,OAAOA,kBAAP,MAA+C,2BAA/C;AACA,SAAQC,KAAR,EAAeC,IAAf,QAA0B,MAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,oBAAoF,GAAIC,KAAD,IAAW;AAC3G,sBACI,oBAAC,IAAD,CAAM,IAAN;AACI,IAAA,KAAK,EAAC,UADV;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,KAAK,EAAE,CAAC;AAAEC,MAAAA,QAAQ,EAAE,CAACD,KAAK,CAACE,mBAAnB;AAAwCC,MAAAA,OAAO,EAAE,CAACH,KAAK,CAACE,mBAAP,GAA8B,sBAA9B,GAAsD;AAAvG,KAAD;AAHX,kBAKI,oBAAC,kBAAD,QACK,CAAC;AAAEE,IAAAA,aAAF;AAAiBC,IAAAA,sBAAjB;AAAyCC,IAAAA,WAAzC;AAAsDC,IAAAA;AAAtD,GAAD,kBACG,uDACI,oBAAC,KAAD,eACQH,aAAa,CAAC;AACdI,IAAAA,EAAE,EAAE;AADU,GAAD,CADrB;AAII,IAAA,YAAY,EAAER,KAAK,CAACS,YAJxB;AAKI,IAAA,WAAW,EAAC;AALhB,KADJ,eAOI;AAAK,IAAA,SAAS,EAAC;AAAf,KACSF,OAAO,gBAAG,8CAAH,GAA2B,IAD3C,EAESD,WAAW,CAACI,GAAZ,CAAiBC,UAAD,IAA4B;AACzC,UAAMC,SAAS,GAAGD,UAAU,CAACE,MAAX,GAAoB,yBAApB,GAAgD,iBAAlE;AACA,UAAMC,KAAK,GAAGH,UAAU,CAACE,MAAX,GACZ;AAAEE,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE,SAAtC;AAAiDC,MAAAA,OAAO,EAAE;AAA1D,KADY,GAEZ;AAAEF,MAAAA,eAAe,EAAE,SAAnB;AAA8BC,MAAAA,MAAM,EAAE;AAAtC,KAFF;AAIA,UAAME,MAAW,GAAG,EACpB,GAAGb,sBAAsB,CAACM,UAAD,EAAa;AAClCC,QAAAA,SADkC;AAElCE,QAAAA;AAFkC,OAAb;AADL,KAApB;AAOA,wBACA,wCAASI,MAAT;AAAiB,MAAA,GAAG,EAAEP,UAAU,CAACH;AAAjC,qBACI,iCAAMG,UAAU,CAACQ,WAAjB,CADJ,CADA;AAKH,GAlBA,CAFT,CAPJ,CAFR,CALJ,CADJ;AA0CH,CA3CM","sourcesContent":["import PlacesAutocomplete, { Suggestion } from \"react-places-autocomplete\";\nimport {Input, Form} from 'antd'\nimport React from 'react'\n\nexport const LocationAutocomplete: React.FC<{defaultValue: string, isModifyProfilePage: boolean}> = (props) => {\n    return (\n        <Form.Item\n            label=\"Location\"\n            name=\"location\"\n            rules={[{ required: !props.isModifyProfilePage, message: !props.isModifyProfilePage ? `Location is required` : '' }]}\n        >\n            <PlacesAutocomplete>\n                {({ getInputProps, getSuggestionItemProps, suggestions, loading }) => (\n                    <>\n                        <Input \n                            {...getInputProps({\n                                id: \"address-input\"\n                            })}\n                            defaultValue={props.defaultValue} \n                            placeholder=\"New York City\"/>\n                        <div className=\"autocomplete-dropdown-container\">\n                                {loading ? <div>Loading...</div> : null}\n                                {suggestions.map((suggestion: Suggestion) => {\n                                    const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\";\n                                    const style = suggestion.active\n                                    ? { backgroundColor: \"#fafafa\", cursor: \"pointer\", padding: 25 }\n                                    : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n\n                                    const spread: any = {\n                                    ...getSuggestionItemProps(suggestion, {\n                                        className,\n                                        style\n                                    })\n                                    };\n\n                                    return (\n                                    <div {...spread} key={suggestion.id}>\n                                        <div>{suggestion.description}</div>\n                                    </div>\n                                    );\n                                })}\n                        </div>  \n                    </>\n                )}         \n            </PlacesAutocomplete>\n        </Form.Item>\n    )\n}"]},"metadata":{},"sourceType":"module"}