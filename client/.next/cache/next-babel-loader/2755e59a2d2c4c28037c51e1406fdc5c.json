{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { Modal } from 'antd';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport { myFirebase } from '../lib/firebase';\nimport { Onboard } from '../components/onboard';\nimport firebase from 'firebase'; // Configure FirebaseUI.\n\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: 'popup',\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  callbacks: {\n    signInSuccessWithAuthResult: () => false\n  },\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [firebase.auth.EmailAuthProvider.PROVIDER_ID]\n};\nexport default function Index() {\n  const [isSignedIn, setSignedIn] = useState(false);\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(user => setSignedIn(!!user));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Modal, {\n    title: \"Sign In\",\n    visible: isSignedIn\n  }, /*#__PURE__*/React.createElement(StyledFirebaseAuth, {\n    uiConfig: uiConfig,\n    firebaseAuth: myFirebase.auth()\n  })), /*#__PURE__*/React.createElement(Onboard, null));\n}","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-onboarding/pages/index.tsx"],"names":["React","useEffect","useState","Modal","StyledFirebaseAuth","myFirebase","Onboard","firebase","uiConfig","signInFlow","callbacks","signInSuccessWithAuthResult","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","Index","isSignedIn","setSignedIn","onAuthStateChanged","user"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,SAAQC,UAAR,QAAyB,iBAAzB;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;;AACA,MAAMC,QAAQ,GAAG;AACb;AACAC,EAAAA,UAAU,EAAE,OAFC;AAGb;AACAC,EAAAA,SAAS,EAAE;AACPC,IAAAA,2BAA2B,EAAE,MAAM;AAD5B,GAJE;AAOb;AACAC,EAAAA,aAAa,EAAE,CACXL,QAAQ,CAACM,IAAT,CAAcC,iBAAd,CAAgCC,WADrB;AARF,CAAjB;AAaA,eAAe,SAASC,KAAT,GAAiB;AAC5B,QAAM,CAACC,UAAD,EAAaC,WAAb,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,QAAQ,CAACM,IAAT,GAAgBM,kBAAhB,CACKC,IAAD,IAAUF,WAAW,CAAC,CAAC,CAACE,IAAH,CADzB;AAGH,GAJQ,CAAT;AAOA,sBACI,8CACI,oBAAC,KAAD;AACI,IAAA,KAAK,EAAE,SADX;AAEI,IAAA,OAAO,EAAEH;AAFb,kBAII,oBAAC,kBAAD;AACI,IAAA,QAAQ,EAAET,QADd;AAEI,IAAA,YAAY,EAAEH,UAAU,CAACQ,IAAX;AAFlB,IAJJ,CADJ,eASI,oBAAC,OAAD,OATJ,CADJ;AAaH","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { Modal } from 'antd';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport {myFirebase} from '../lib/firebase'\nimport {Onboard} from '../components/onboard'\nimport firebase from 'firebase'\n\n// Configure FirebaseUI.\nconst uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: 'popup',\n    // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n    callbacks: {\n        signInSuccessWithAuthResult: () => false\n    },\n    // We will display Google and Facebook as auth providers.\n    signInOptions: [\n        firebase.auth.EmailAuthProvider.PROVIDER_ID\n    ]\n};\n\nexport default function Index() {\n    const [isSignedIn, setSignedIn] = useState(false);\n\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged(\n            (user) => setSignedIn(!!user)\n        );\n    });\n\n\n    return (\n        <div>\n            <Modal\n                title={\"Sign In\"}\n                visible={isSignedIn}\n            >\n                <StyledFirebaseAuth\n                    uiConfig={uiConfig}\n                    firebaseAuth={myFirebase.auth()}/>\n            </Modal>\n            <Onboard/>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}