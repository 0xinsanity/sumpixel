{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Modal from 'react-modal';\nimport { Onboard } from '../components/onboard';\nimport firebase from 'firebase';\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"uiConfig\", {\n      // Popup signin flow rather than redirect flow.\n      signInFlow: 'popup',\n      // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n      callbacks: {\n        signInSuccessWithAuthResult: () => false\n      },\n      // We will display Google and Facebook as auth providers.\n      signInOptions: [firebase.auth.EmailAuthProvider.PROVIDER_ID]\n    });\n\n    this.state = {\n      isSignedIn: false\n    };\n    this.unregisterAuthObserver = this.unregisterAuthObserver.bind(this);\n  }\n\n  unregisterAuthObserver() {\n    firebase.auth().onAuthStateChanged(user => this.setState({\n      isSignedIn: !!user\n    }));\n  }\n\n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Modal, {\n      style: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)'\n      },\n      isOpen: !this.state.isSignedIn\n    }), /*#__PURE__*/React.createElement(Onboard, null));\n  }\n\n}","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-onboarding/pages/index.tsx"],"names":["React","Modal","Onboard","firebase","Index","Component","constructor","props","signInFlow","callbacks","signInSuccessWithAuthResult","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","state","isSignedIn","unregisterAuthObserver","bind","onAuthStateChanged","user","setState","componentWillUnmount","render","top","left","right","bottom","marginRight","transform"],"mappings":";;AAAA,OAAOA,KAAP,MAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAGA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAMA,eAAe,MAAMC,KAAN,SAAoBJ,KAAK,CAACK,SAA1B,CAAoD;AAC/DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,sCASR;AACP;AACAC,MAAAA,UAAU,EAAE,OAFL;AAGP;AACAC,MAAAA,SAAS,EAAE;AACPC,QAAAA,2BAA2B,EAAE,MAAM;AAD5B,OAJJ;AAOP;AACAC,MAAAA,aAAa,EAAE,CACXR,QAAQ,CAACS,IAAT,CAAcC,iBAAd,CAAgCC,WADrB;AARR,KATQ;;AAEf,SAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE;AADH,KAAb;AAIA,SAAKC,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BC,IAA5B,CAAiC,IAAjC,CAA9B;AACH;;AAeDD,EAAAA,sBAAsB,GAAG;AACrBd,IAAAA,QAAQ,CAACS,IAAT,GAAgBO,kBAAhB,CACKC,IAAD,IAAU,KAAKC,QAAL,CAAc;AAACL,MAAAA,UAAU,EAAE,CAAC,CAACI;AAAf,KAAd,CADd;AAGH;;AAEDE,EAAAA,oBAAoB,GAAG;AACnB,SAAKL,sBAAL;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACL,wBACI,8CACI,oBAAC,KAAD;AACI,MAAA,KAAK,EAAE;AACCC,QAAAA,GAAG,EAAqB,KADzB;AAECC,QAAAA,IAAI,EAAoB,KAFzB;AAGCC,QAAAA,KAAK,EAAmB,MAHzB;AAICC,QAAAA,MAAM,EAAkB,MAJzB;AAKCC,QAAAA,WAAW,EAAa,MALzB;AAMCC,QAAAA,SAAS,EAAe;AANzB,OADX;AASI,MAAA,MAAM,EAAE,CAAC,KAAKd,KAAL,CAAWC;AATxB,MADJ,eAaI,oBAAC,OAAD,OAbJ,CADJ;AAiBH;;AAnD8D","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport Modal from 'react-modal';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport {myFirebase} from '../lib/firebase'\nimport {Onboard} from '../components/onboard'\nimport firebase from 'firebase'\n\ninterface IndexState {\n    isSignedIn: boolean\n}\n\nexport default class Index extends React.Component<{}, IndexState> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSignedIn: false\n        };\n\n        this.unregisterAuthObserver = this.unregisterAuthObserver.bind(this)\n    }\n\n    uiConfig = {\n        // Popup signin flow rather than redirect flow.\n        signInFlow: 'popup',\n        // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n        callbacks: {\n            signInSuccessWithAuthResult: () => false\n        },\n        // We will display Google and Facebook as auth providers.\n        signInOptions: [\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ]\n    };\n\n    unregisterAuthObserver() {\n        firebase.auth().onAuthStateChanged(\n            (user) => this.setState({isSignedIn: !!user})\n        );\n    }\n\n    componentWillUnmount() {\n        this.unregisterAuthObserver()\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    style={{\n                            top                   : '50%',\n                            left                  : '50%',\n                            right                 : 'auto',\n                            bottom                : 'auto',\n                            marginRight           : '-50%',\n                            transform             : 'translate(-50%, -50%)'\n                        }}\n                    isOpen={!this.state.isSignedIn}\n                >\n                </Modal>\n                <Onboard/>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}