{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Modal } from 'antd';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport { myFirebase } from '../lib/firebase';\nimport { Onboard } from '../components/onboard';\nimport firebase from 'firebase';\nexport default class Index extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isSignedIn: false\n    });\n\n    _defineProperty(this, \"uiConfig\", {\n      // Popup signin flow rather than redirect flow.\n      signInFlow: 'popup',\n      // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n      callbacks: {\n        signInSuccessWithAuthResult: () => false\n      },\n      // We will display Google and Facebook as auth providers.\n      signInOptions: [firebase.auth.EmailAuthProvider.PROVIDER_ID]\n    });\n  }\n\n  componentDidMount() {\n    this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(user => this.setState({\n      isSignedIn: !!user\n    }));\n  }\n\n  componentWillUnmount() {\n    this.unregisterAuthObserver();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Modal, {\n      title: \"Sign In\",\n      visible: this.state.isSignedIn\n    }, /*#__PURE__*/React.createElement(StyledFirebaseAuth, {\n      uiConfig: this.uiConfig,\n      firebaseAuth: myFirebase.auth()\n    })), /*#__PURE__*/React.createElement(Onboard, null));\n  }\n\n}","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-onboarding/pages/index.tsx"],"names":["React","useEffect","useState","Modal","StyledFirebaseAuth","myFirebase","Onboard","firebase","Index","Component","isSignedIn","signInFlow","callbacks","signInSuccessWithAuthResult","signInOptions","auth","EmailAuthProvider","PROVIDER_ID","componentDidMount","unregisterAuthObserver","onAuthStateChanged","user","setState","componentWillUnmount","render","state","uiConfig"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,SAAQC,UAAR,QAAyB,iBAAzB;AACA,SAAQC,OAAR,QAAsB,uBAAtB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,eAAe,MAAMC,KAAN,SAAoBR,KAAK,CAACS,SAA1B,CAAoC;AAAA;AAAA;;AAAA,mCACvC;AACJC,MAAAA,UAAU,EAAE;AADR,KADuC;;AAAA,sCAKpC;AACP;AACAC,MAAAA,UAAU,EAAE,OAFL;AAGP;AACAC,MAAAA,SAAS,EAAE;AACPC,QAAAA,2BAA2B,EAAE,MAAM;AAD5B,OAJJ;AAOP;AACAC,MAAAA,aAAa,EAAE,CACXP,QAAQ,CAACQ,IAAT,CAAcC,iBAAd,CAAgCC,WADrB;AARR,KALoC;AAAA;;AAkB/CC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,sBAAL,GAA8BZ,QAAQ,CAACQ,IAAT,GAAgBK,kBAAhB,CACzBC,IAAD,IAAU,KAAKC,QAAL,CAAc;AAACZ,MAAAA,UAAU,EAAE,CAAC,CAACW;AAAf,KAAd,CADgB,CAA9B;AAGH;;AAEDE,EAAAA,oBAAoB,GAAG;AACnB,SAAKJ,sBAAL;AACH;;AAEDK,EAAAA,MAAM,GAAG;AACL,wBACI,8CACI,oBAAC,KAAD;AACI,MAAA,KAAK,EAAE,SADX;AAEI,MAAA,OAAO,EAAE,KAAKC,KAAL,CAAWf;AAFxB,oBAII,oBAAC,kBAAD;AACI,MAAA,QAAQ,EAAE,KAAKgB,QADnB;AAEI,MAAA,YAAY,EAAErB,UAAU,CAACU,IAAX;AAFlB,MAJJ,CADJ,eASI,oBAAC,OAAD,OATJ,CADJ;AAaH;;AA1C8C","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport { Modal } from 'antd';\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport {myFirebase} from '../lib/firebase'\nimport {Onboard} from '../components/onboard'\nimport firebase from 'firebase'\n\nexport default class Index extends React.Component {\n    state = {\n        isSignedIn: false\n    };\n\n    uiConfig = {\n        // Popup signin flow rather than redirect flow.\n        signInFlow: 'popup',\n        // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n        callbacks: {\n            signInSuccessWithAuthResult: () => false\n        },\n        // We will display Google and Facebook as auth providers.\n        signInOptions: [\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ]\n    };\n\n    componentDidMount() {\n        this.unregisterAuthObserver = firebase.auth().onAuthStateChanged(\n            (user) => this.setState({isSignedIn: !!user})\n        );\n    }\n\n    componentWillUnmount() {\n        this.unregisterAuthObserver()\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal\n                    title={\"Sign In\"}\n                    visible={this.state.isSignedIn}\n                >\n                    <StyledFirebaseAuth\n                        uiConfig={this.uiConfig}\n                        firebaseAuth={myFirebase.auth()}/>\n                </Modal>\n                <Onboard/>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}