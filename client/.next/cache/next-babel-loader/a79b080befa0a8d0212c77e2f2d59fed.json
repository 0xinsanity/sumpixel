{"ast":null,"code":"import React from 'react';\nimport { DesignerDecisionTalk, EmployerDecisionHire, Popconfirm } from '../../../model/model';\nimport { Typography, List, Radio } from 'antd';\n\nconst EmployerCommList = props => {\n  const {\n    communicationList,\n    updateEmployerDecision\n  } = props;\n\n  const decisionToText = (fullName, dec) => {\n    switch (dec) {\n      case DesignerDecisionTalk.UNDECIDED:\n        return '';\n\n      case DesignerDecisionTalk.WILL_TALK:\n        return `${fullName} is interested in working for you. You will soon be in contact with them.`;\n\n      case DesignerDecisionTalk.WILL_NOT_TALK:\n        return `${fullName} is not interested in your offer`;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(List, {\n    style: {\n      width: '100%'\n    },\n    dataSource: communicationList,\n    bordered: true,\n    renderItem: ({\n      communicationId,\n      fullName,\n      designerApprovedTalk,\n      decision\n    }) => /*#__PURE__*/React.createElement(List.Item, null, /*#__PURE__*/React.createElement(List.Item.Meta, {\n      title: fullName,\n      description: decisionToText(fullName, designerApprovedTalk)\n    }), designerApprovedTalk === DesignerDecisionTalk.WILL_TALK ? /*#__PURE__*/React.createElement(Popconfirm, {\n      title: \"Are you sure?\",\n      onConfirm: e => updateEmployerDecision(communicationId, e.target.value)\n    }, /*#__PURE__*/React.createElement(Radio.Group, {\n      value: decision\n    }, /*#__PURE__*/React.createElement(Radio.Button, {\n      value: EmployerDecisionHire.UNDECIDED\n    }, \"Still In Talks\"), /*#__PURE__*/React.createElement(Radio.Button, {\n      value: EmployerDecisionHire.REJECT\n    }, \"Reject\"), /*#__PURE__*/React.createElement(Radio.Button, {\n      value: EmployerDecisionHire.HIRE\n    }, \"Hire\"))) : designerApprovedTalk === DesignerDecisionTalk.UNDECIDED ? /*#__PURE__*/React.createElement(Typography.Text, null, \"We are contacting \", fullName, \" to inform them you are interested.\") : null)\n  });\n};\n\nexport default EmployerCommList;","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-client/components/Dashboard/Employer/EmployerCommList.tsx"],"names":["React","DesignerDecisionTalk","EmployerDecisionHire","Popconfirm","Typography","List","Radio","EmployerCommList","props","communicationList","updateEmployerDecision","decisionToText","fullName","dec","UNDECIDED","WILL_TALK","WILL_NOT_TALK","width","communicationId","designerApprovedTalk","decision","e","target","value","REJECT","HIRE"],"mappings":"AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAIA,SAAcC,oBAAd,EAAoCC,oBAApC,EAA2EC,UAA3E,QAA4F,sBAA5F;AACA,SAAQC,UAAR,EAAoBC,IAApB,EAA0BC,KAA1B,QAAsC,MAAtC;;AAOA,MAAMC,gBAAmD,GAAIC,KAAD,IAAW;AACnE,QAAM;AAACC,IAAAA,iBAAD;AAAoBC,IAAAA;AAApB,MAA8CF,KAApD;;AAEA,QAAMG,cAAc,GAAG,CAACC,QAAD,EAAmBC,GAAnB,KAAyD;AAC5E,YAAQA,GAAR;AACI,WAAKZ,oBAAoB,CAACa,SAA1B;AACI,eAAO,EAAP;;AACJ,WAAKb,oBAAoB,CAACc,SAA1B;AACI,eAAQ,GAAEH,QAAS,2EAAnB;;AACJ,WAAKX,oBAAoB,CAACe,aAA1B;AACI,eAAQ,GAAEJ,QAAS,kCAAnB;AANR;AAQH,GATD;;AAWA,sBACI,oBAAC,IAAD;AACI,IAAA,KAAK,EAAE;AAACK,MAAAA,KAAK,EAAE;AAAR,KADX;AAEI,IAAA,UAAU,EAAER,iBAFhB;AAGI,IAAA,QAAQ,MAHZ;AAII,IAAA,UAAU,EAAE,CAAC;AAACS,MAAAA,eAAD;AAAkBN,MAAAA,QAAlB;AAA4BO,MAAAA,oBAA5B;AAAkDC,MAAAA;AAAlD,KAAD,kBACR,oBAAC,IAAD,CAAM,IAAN,qBACI,oBAAC,IAAD,CAAM,IAAN,CAAW,IAAX;AAAgB,MAAA,KAAK,EAAER,QAAvB;AAAiC,MAAA,WAAW,EAAED,cAAc,CAACC,QAAD,EAAWO,oBAAX;AAA5D,MADJ,EAEKA,oBAAoB,KAAKlB,oBAAoB,CAACc,SAA9C,gBACD,oBAAC,UAAD;AACI,MAAA,KAAK,EAAC,eADV;AAEI,MAAA,SAAS,EAAGM,CAAD,IAAOX,sBAAsB,CAACQ,eAAD,EAAkBG,CAAC,CAACC,MAAF,CAASC,KAA3B;AAF5C,oBAII,oBAAC,KAAD,CAAO,KAAP;AAAa,MAAA,KAAK,EAAEH;AAApB,oBACI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAElB,oBAAoB,CAACY;AAA1C,wBADJ,eAEI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAEZ,oBAAoB,CAACsB;AAA1C,gBAFJ,eAGI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAEtB,oBAAoB,CAACuB;AAA1C,cAHJ,CAJJ,CADC,GAWCN,oBAAoB,KAAKlB,oBAAoB,CAACa,SAA9C,gBACF,oBAAC,UAAD,CAAY,IAAZ,8BAAoCF,QAApC,wCADE,GAEA,IAfN;AALR,IADJ;AA2BH,CAzCD;;AA2CA,eAAeL,gBAAf","sourcesContent":["import React, {useContext} from 'react'\nimport {UserContext} from '../../../lib/UserProvider'\nimport QuizScreen from '../../OnboardingFlow/Designers/QuizScreen'\nimport {createUser} from '../../../lib/server'\nimport {User, DesignerDecisionTalk, EmployerDecisionHire, CommForEmployer, Popconfirm} from '../../../model/model'\nimport {Typography, List, Radio} from 'antd'\n\ninterface CommunicationsListProps {\n    communicationList: CommForEmployer[]\n    updateEmployerDecision: (commId: string, update: EmployerDecisionHire) => void\n}\n\nconst EmployerCommList: React.FC<CommunicationsListProps> = (props) => {\n    const {communicationList, updateEmployerDecision} = props\n\n    const decisionToText = (fullName: string, dec: DesignerDecisionTalk): string => {\n        switch (dec) {\n            case DesignerDecisionTalk.UNDECIDED:\n                return ''\n            case DesignerDecisionTalk.WILL_TALK:\n                return `${fullName} is interested in working for you. You will soon be in contact with them.`\n            case DesignerDecisionTalk.WILL_NOT_TALK:\n                return `${fullName} is not interested in your offer`\n        }\n    }\n\n    return (\n        <List\n            style={{width: '100%'}}\n            dataSource={communicationList}\n            bordered\n            renderItem={({communicationId, fullName, designerApprovedTalk, decision}) => (\n                <List.Item>\n                    <List.Item.Meta title={fullName} description={decisionToText(fullName, designerApprovedTalk)}/>\n                    {designerApprovedTalk === DesignerDecisionTalk.WILL_TALK ? \n                    <Popconfirm \n                        title=\"Are you sure?\" \n                        onConfirm={(e) => updateEmployerDecision(communicationId, e.target.value)}\n                    >\n                        <Radio.Group value={decision}>\n                            <Radio.Button value={EmployerDecisionHire.UNDECIDED}>Still In Talks</Radio.Button>\n                            <Radio.Button value={EmployerDecisionHire.REJECT}>Reject</Radio.Button>\n                            <Radio.Button value={EmployerDecisionHire.HIRE}>Hire</Radio.Button>\n                        </Radio.Group>\n                    </Popconfirm> \n                    : designerApprovedTalk === DesignerDecisionTalk.UNDECIDED ? \n                    <Typography.Text>We are contacting {fullName} to inform them you are interested.</Typography.Text>\n                    : null}\n                    \n                </List.Item>\n            )}\n        />\n    )\n}\n\nexport default EmployerCommList"]},"metadata":{},"sourceType":"module"}