{"ast":null,"code":"import React from 'react';\nimport { DesignerDecisionTalk, EmployerDecisionHire } from '../../../model/model';\nimport { List, Radio } from 'antd';\n\nconst CommunicationsList = props => {\n  const {\n    communicationList,\n    updateDesignerText\n  } = props;\n\n  const decisionToText = (companyName, dec) => {\n    switch (dec) {\n      case EmployerDecisionHire.UNDECIDED:\n        return `${companyName} is reviewing your profile`;\n\n      case EmployerDecisionHire.HIRE:\n        return `${companyName} wants to hire you`;\n\n      case EmployerDecisionHire.REJECT:\n        return `${companyName} has decided to look at other profiles`;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(List, {\n    style: {\n      width: '100%'\n    },\n    dataSource: communicationList,\n    bordered: true,\n    renderItem: ({\n      communicationId,\n      companyName,\n      designerApprovedTalk,\n      decision\n    }) => /*#__PURE__*/React.createElement(List.Item, null, /*#__PURE__*/React.createElement(List.Item.Meta, {\n      title: companyName,\n      description: decisionToText(companyName, decision)\n    }), /*#__PURE__*/React.createElement(Radio.Group, {\n      onChange: e => updateDesignerText(communicationId, e.target.value),\n      value: designerApprovedTalk\n    }, /*#__PURE__*/React.createElement(Radio.Button, {\n      value: DesignerDecisionTalk.UNDECIDED\n    }, \"Undecided\"), /*#__PURE__*/React.createElement(Radio.Button, {\n      value: DesignerDecisionTalk.WILL_TALK\n    }, \"Will Talk\"), /*#__PURE__*/React.createElement(Radio.Button, {\n      value: DesignerDecisionTalk.WILL_NOT_TALK\n    }, \"Will Not Talk\")))\n  });\n};\n\nexport default CommunicationsList;","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-client/components/Dashboard/Designer/CommunicationsList.tsx"],"names":["React","DesignerDecisionTalk","EmployerDecisionHire","List","Radio","CommunicationsList","props","communicationList","updateDesignerText","decisionToText","companyName","dec","UNDECIDED","HIRE","REJECT","width","communicationId","designerApprovedTalk","decision","e","target","value","WILL_TALK","WILL_NOT_TALK"],"mappings":"AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAIA,SAAcC,oBAAd,EAAoCC,oBAApC,QAAgF,sBAAhF;AACA,SAAoBC,IAApB,EAA0BC,KAA1B,QAAsC,MAAtC;;AAOA,MAAMC,kBAAqD,GAAIC,KAAD,IAAW;AACrE,QAAM;AAACC,IAAAA,iBAAD;AAAoBC,IAAAA;AAApB,MAA0CF,KAAhD;;AAEA,QAAMG,cAAc,GAAG,CAACC,WAAD,EAAsBC,GAAtB,KAA4D;AAC/E,YAAQA,GAAR;AACI,WAAKT,oBAAoB,CAACU,SAA1B;AACI,eAAQ,GAAEF,WAAY,4BAAtB;;AACJ,WAAKR,oBAAoB,CAACW,IAA1B;AACI,eAAQ,GAAEH,WAAY,oBAAtB;;AACJ,WAAKR,oBAAoB,CAACY,MAA1B;AACI,eAAQ,GAAEJ,WAAY,wCAAtB;AANR;AAQH,GATD;;AAWA,sBACI,oBAAC,IAAD;AACI,IAAA,KAAK,EAAE;AAACK,MAAAA,KAAK,EAAE;AAAR,KADX;AAEI,IAAA,UAAU,EAAER,iBAFhB;AAGI,IAAA,QAAQ,MAHZ;AAII,IAAA,UAAU,EAAE,CAAC;AAACS,MAAAA,eAAD;AAAkBN,MAAAA,WAAlB;AAA+BO,MAAAA,oBAA/B;AAAqDC,MAAAA;AAArD,KAAD,kBACR,oBAAC,IAAD,CAAM,IAAN,qBACI,oBAAC,IAAD,CAAM,IAAN,CAAW,IAAX;AAAgB,MAAA,KAAK,EAAER,WAAvB;AAAoC,MAAA,WAAW,EAAED,cAAc,CAACC,WAAD,EAAcQ,QAAd;AAA/D,MADJ,eAEI,oBAAC,KAAD,CAAO,KAAP;AAAa,MAAA,QAAQ,EAAGC,CAAD,IAAOX,kBAAkB,CAACQ,eAAD,EAAkBG,CAAC,CAACC,MAAF,CAASC,KAA3B,CAAhD;AAAmF,MAAA,KAAK,EAAEJ;AAA1F,oBACI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAEhB,oBAAoB,CAACW;AAA1C,mBADJ,eAEI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAEX,oBAAoB,CAACqB;AAA1C,mBAFJ,eAGI,oBAAC,KAAD,CAAO,MAAP;AAAc,MAAA,KAAK,EAAErB,oBAAoB,CAACsB;AAA1C,uBAHJ,CAFJ;AALR,IADJ;AAiBH,CA/BD;;AAiCA,eAAelB,kBAAf","sourcesContent":["import React, {useContext} from 'react'\nimport {UserContext} from '../../../lib/UserProvider'\nimport QuizScreen from '../../OnboardingFlow/Designers/QuizScreen'\nimport {createUser} from '../../../lib/server'\nimport {User, DesignerDecisionTalk, EmployerDecisionHire, CommForDesigner} from '../../../model/model'\nimport {Typography, List, Radio} from 'antd'\n\ninterface CommunicationsListProps {\n    communicationList: CommForDesigner[]\n    updateDesignerText: (commId: string, update: DesignerDecisionTalk) => void\n}\n\nconst CommunicationsList: React.FC<CommunicationsListProps> = (props) => {\n    const {communicationList, updateDesignerText} = props\n\n    const decisionToText = (companyName: string, dec: EmployerDecisionHire): string => {\n        switch (dec) {\n            case EmployerDecisionHire.UNDECIDED:\n                return `${companyName} is reviewing your profile`\n            case EmployerDecisionHire.HIRE:\n                return `${companyName} wants to hire you`\n            case EmployerDecisionHire.REJECT:\n                return `${companyName} has decided to look at other profiles`\n        }\n    }\n\n    return (\n        <List\n            style={{width: '100%'}}\n            dataSource={communicationList}\n            bordered\n            renderItem={({communicationId, companyName, designerApprovedTalk, decision}) => (\n                <List.Item>\n                    <List.Item.Meta title={companyName} description={decisionToText(companyName, decision)}/>\n                    <Radio.Group onChange={(e) => updateDesignerText(communicationId, e.target.value)} value={designerApprovedTalk}>\n                        <Radio.Button value={DesignerDecisionTalk.UNDECIDED}>Undecided</Radio.Button>\n                        <Radio.Button value={DesignerDecisionTalk.WILL_TALK}>Will Talk</Radio.Button>\n                        <Radio.Button value={DesignerDecisionTalk.WILL_NOT_TALK}>Will Not Talk</Radio.Button>\n                    </Radio.Group>\n                </List.Item>\n            )}\n        />\n    )\n}\n\nexport default CommunicationsList"]},"metadata":{},"sourceType":"module"}