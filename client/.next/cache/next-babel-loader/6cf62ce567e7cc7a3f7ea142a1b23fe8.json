{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component, createContext } from \"react\";\nimport { myFirebase } from \"./firebase\";\nimport { getEmployer, getUser } from './server';\nimport Router from \"next/router\";\nexport const UserContext = createContext(null);\n\nclass UserProvider extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      user: null\n    });\n\n    _defineProperty(this, \"componentDidMount\", () => {\n      myFirebase.auth().onAuthStateChanged(async userAuth => {\n        const user = await getUser(userAuth.uid);\n        const employer = await getEmployer(userAuth.uid);\n\n        if (user['user_exists'] == undefined) {\n          this.setState({\n            user: user\n          });\n          Router.push('/dashboard_user');\n        } else if (employer['employer_exists'] == undefined) {\n          this.setState({\n            user: employer\n          });\n          Router.push('/dashboard_employer');\n        } else {\n          // Works for both\n          this.setState({\n            user: {\n              email: userAuth.email,\n              id: userAuth.uid,\n              firstName: userAuth.displayName.substr(0, userAuth.displayName.indexOf(' ')),\n              lastName: userAuth.displayName.substr(userAuth.displayName.indexOf(' ') + 1)\n            }\n          });\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(UserContext.Provider, {\n      value: this.state.user\n    }, this.props.children);\n  }\n\n}\n\nexport default UserProvider;","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-client/lib/UserProvider.tsx"],"names":["React","Component","createContext","myFirebase","getEmployer","getUser","Router","UserContext","UserProvider","user","auth","onAuthStateChanged","userAuth","uid","employer","undefined","setState","push","email","id","firstName","displayName","substr","indexOf","lastName","render","state","props","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,SAAQC,WAAR,EAAqBC,OAArB,QAAmC,UAAnC;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAO,MAAMC,WAAW,GAAGL,aAAa,CAAyB,IAAzB,CAAjC;;AACP,MAAMM,YAAN,SAA2BP,SAA3B,CAAqC;AAAA;AAAA;;AAAA,mCAC3B;AACNQ,MAAAA,IAAI,EAAE;AADA,KAD2B;;AAAA,+CAKf,MAAM;AACxBN,MAAAA,UAAU,CAACO,IAAX,GAAkBC,kBAAlB,CAAqC,MAAOC,QAAP,IAAoB;AACrD,cAAMH,IAAI,GAAG,MAAMJ,OAAO,CAACO,QAAQ,CAACC,GAAV,CAA1B;AACA,cAAMC,QAAQ,GAAG,MAAMV,WAAW,CAACQ,QAAQ,CAACC,GAAV,CAAlC;;AAEA,YAAIJ,IAAI,CAAC,aAAD,CAAJ,IAAuBM,SAA3B,EAAsC;AAClC,eAAKC,QAAL,CAAc;AAACP,YAAAA,IAAI,EAAEA;AAAP,WAAd;AACAH,UAAAA,MAAM,CAACW,IAAP,CAAY,iBAAZ;AACH,SAHD,MAGO,IAAIH,QAAQ,CAAC,iBAAD,CAAR,IAA+BC,SAAnC,EAA8C;AACjD,eAAKC,QAAL,CAAc;AAACP,YAAAA,IAAI,EAAEK;AAAP,WAAd;AACAR,UAAAA,MAAM,CAACW,IAAP,CAAY,qBAAZ;AACH,SAHM,MAGA;AACH;AACA,eAAKD,QAAL,CAAc;AAACP,YAAAA,IAAI,EAAE;AACjBS,cAAAA,KAAK,EAAEN,QAAQ,CAACM,KADC;AAEjBC,cAAAA,EAAE,EAAEP,QAAQ,CAACC,GAFI;AAGjBO,cAAAA,SAAS,EAAER,QAAQ,CAACS,WAAT,CAAqBC,MAArB,CAA4B,CAA5B,EAA+BV,QAAQ,CAACS,WAAT,CAAqBE,OAArB,CAA6B,GAA7B,CAA/B,CAHM;AAIjBC,cAAAA,QAAQ,EAAEZ,QAAQ,CAACS,WAAT,CAAqBC,MAArB,CAA4BV,QAAQ,CAACS,WAAT,CAAqBE,OAArB,CAA6B,GAA7B,IAAkC,CAA9D;AAJO;AAAP,WAAd;AAMH;AACJ,OAnBD;AAoBD,KA1BkC;AAAA;;AA2BnCE,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE,KAAKC,KAAL,CAAWjB;AAAxC,OACG,KAAKkB,KAAL,CAAWC,QADd,CADF;AAKD;;AAjCkC;;AAmCrC,eAAepB,YAAf","sourcesContent":["import React, { Component, createContext } from \"react\";\nimport { myFirebase } from \"./firebase\";\nimport {User, Employer} from '../model/model'\nimport {getEmployer, getUser} from './server'\nimport Router from \"next/router\";\n\nexport const UserContext = createContext<User | Employer | null>(null);\nclass UserProvider extends Component {\n  state = {\n    user: null\n  };\n\n  componentDidMount = () => {\n    myFirebase.auth().onAuthStateChanged(async (userAuth) => {\n        const user = await getUser(userAuth.uid)\n        const employer = await getEmployer(userAuth.uid)\n\n        if (user['user_exists'] == undefined) {\n            this.setState({user: user as User});\n            Router.push('/dashboard_user')\n        } else if (employer['employer_exists'] == undefined) {\n            this.setState({user: employer as Employer});\n            Router.push('/dashboard_employer')\n        } else {\n            // Works for both\n            this.setState({user: {\n                email: userAuth.email,\n                id: userAuth.uid,\n                firstName: userAuth.displayName.substr(0, userAuth.displayName.indexOf(' ')),\n                lastName: userAuth.displayName.substr(userAuth.displayName.indexOf(' ')+1),\n            }});\n        }\n    });\n  };\n  render() {\n    return (\n      <UserContext.Provider value={this.state.user}>\n        {this.props.children}\n      </UserContext.Provider>\n    );\n  }\n}\nexport default UserProvider;"]},"metadata":{},"sourceType":"module"}