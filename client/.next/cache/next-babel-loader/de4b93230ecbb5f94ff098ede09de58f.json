{"ast":null,"code":"import \"antd/lib/typography/style\";\nimport _Typography from \"antd/lib/typography\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport \"antd/lib/list/style\";\nimport _List from \"antd/lib/list\";\nimport React from 'react';\nimport { DesignerDecisionTalk, EmployerDecisionHire } from '../../../model/model';\n\nconst EmployerCommList = props => {\n  const {\n    communicationList,\n    updateDecision\n  } = props;\n\n  const decisionToText = dec => {\n    switch (dec) {\n      case DesignerDecisionTalk.UNDECIDED:\n        return '';\n\n      case DesignerDecisionTalk.WILL_TALK:\n        return `You will soon be in contact with them.`;\n\n      case DesignerDecisionTalk.WILL_NOT_TALK:\n        return `They are not interested in your offer`;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(_List, {\n    style: {\n      width: '100%'\n    },\n    dataSource: communicationList,\n    bordered: true,\n    renderItem: ({\n      communicationId,\n      fullName,\n      designerApprovedTalk,\n      decision\n    }) => /*#__PURE__*/React.createElement(_List.Item, null, /*#__PURE__*/React.createElement(_List.Item.Meta, {\n      title: fullName,\n      description: decisionToText(designerApprovedTalk)\n    }), designerApprovedTalk === DesignerDecisionTalk.WILL_TALK ? /*#__PURE__*/React.createElement(_Popconfirm, {\n      title: \"Are you sure?\"\n    }, /*#__PURE__*/React.createElement(_Radio.Group, {\n      onChange: e => updateDecision(communicationId, e.target.value),\n      value: decision\n    }, /*#__PURE__*/React.createElement(_Radio.Button, {\n      value: EmployerDecisionHire.UNDECIDED\n    }, \"Still In Talks\"), /*#__PURE__*/React.createElement(_Radio.Button, {\n      value: EmployerDecisionHire.REJECT\n    }, \"Reject\"), /*#__PURE__*/React.createElement(_Radio.Button, {\n      value: EmployerDecisionHire.HIRE\n    }, \"Hire\"))) : designerApprovedTalk === DesignerDecisionTalk.UNDECIDED ? /*#__PURE__*/React.createElement(_Typography.Text, null, \"We are contacting \", fullName, \" to inform them you are interested.\") : null)\n  });\n};\n\nexport default EmployerCommList;","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel/client/components/Dashboard/Employer/EmployerCommList.tsx"],"names":["React","DesignerDecisionTalk","EmployerDecisionHire","EmployerCommList","props","communicationList","updateDecision","decisionToText","dec","UNDECIDED","WILL_TALK","WILL_NOT_TALK","width","communicationId","fullName","designerApprovedTalk","decision","e","target","value","REJECT","HIRE"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AAIA,SAAcC,oBAAd,EAAoCC,oBAApC,QAAgF,sBAAhF;;AAQA,MAAMC,gBAAmD,GAAIC,KAAD,IAAW;AACnE,QAAM;AAACC,IAAAA,iBAAD;AAAoBC,IAAAA;AAApB,MAAsCF,KAA5C;;AAEA,QAAMG,cAAc,GAAIC,GAAD,IAAuC;AAC1D,YAAQA,GAAR;AACI,WAAKP,oBAAoB,CAACQ,SAA1B;AACI,eAAO,EAAP;;AACJ,WAAKR,oBAAoB,CAACS,SAA1B;AACI,eAAQ,wCAAR;;AACJ,WAAKT,oBAAoB,CAACU,aAA1B;AACI,eAAQ,uCAAR;AANR;AAQH,GATD;;AAWA,sBACI;AACI,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE;AAAR,KADX;AAEI,IAAA,UAAU,EAAEP,iBAFhB;AAGI,IAAA,QAAQ,MAHZ;AAII,IAAA,UAAU,EAAE,CAAC;AAACQ,MAAAA,eAAD;AAAkBC,MAAAA,QAAlB;AAA4BC,MAAAA,oBAA5B;AAAkDC,MAAAA;AAAlD,KAAD,kBACR,0BAAM,IAAN,qBACI,0BAAM,IAAN,CAAW,IAAX;AAAgB,MAAA,KAAK,EAAEF,QAAvB;AAAiC,MAAA,WAAW,EAAEP,cAAc,CAACQ,oBAAD;AAA5D,MADJ,EAEKA,oBAAoB,KAAKd,oBAAoB,CAACS,SAA9C,gBACD;AAAY,MAAA,KAAK,EAAE;AAAnB,oBACI,2BAAO,KAAP;AAAa,MAAA,QAAQ,EAAGO,CAAD,IAAOX,cAAc,CAACO,eAAD,EAAkBI,CAAC,CAACC,MAAF,CAASC,KAA3B,CAA5C;AAA+E,MAAA,KAAK,EAAEH;AAAtF,oBACI,2BAAO,MAAP;AAAc,MAAA,KAAK,EAAEd,oBAAoB,CAACO;AAA1C,wBADJ,eAEI,2BAAO,MAAP;AAAc,MAAA,KAAK,EAAEP,oBAAoB,CAACkB;AAA1C,gBAFJ,eAGI,2BAAO,MAAP;AAAc,MAAA,KAAK,EAAElB,oBAAoB,CAACmB;AAA1C,cAHJ,CADJ,CADC,GAQCN,oBAAoB,KAAKd,oBAAoB,CAACQ,SAA9C,gBACF,gCAAY,IAAZ,8BAAoCK,QAApC,wCADE,GAEA,IAZN;AALR,IADJ;AAuBH,CArCD;;AAuCA,eAAeX,gBAAf","sourcesContent":["import React, {useContext} from 'react'\nimport {UserContext} from '../../../lib/UserProvider'\nimport QuizScreen from '../../OnboardingFlow/Designers/QuizScreen'\nimport {createUser} from '../../../lib/server'\nimport {User, DesignerDecisionTalk, EmployerDecisionHire, CommForEmployer} from '../../../model/model'\nimport {Typography, List, Radio, Popconfirm, Button} from 'antd'\n\ninterface CommunicationsListProps {\n    communicationList: CommForEmployer[]\n    updateDecision: (commId: string, update: EmployerDecisionHire) => void\n}\n\nconst EmployerCommList: React.FC<CommunicationsListProps> = (props) => {\n    const {communicationList, updateDecision} = props\n\n    const decisionToText = (dec: DesignerDecisionTalk): string => {\n        switch (dec) {\n            case DesignerDecisionTalk.UNDECIDED:\n                return ''\n            case DesignerDecisionTalk.WILL_TALK:\n                return `You will soon be in contact with them.`\n            case DesignerDecisionTalk.WILL_NOT_TALK:\n                return `They are not interested in your offer`\n        }\n    }\n\n    return (\n        <List\n            style={{width: '100%'}}\n            dataSource={communicationList}\n            bordered\n            renderItem={({communicationId, fullName, designerApprovedTalk, decision}) => (\n                <List.Item>\n                    <List.Item.Meta title={fullName} description={decisionToText(designerApprovedTalk)}/>\n                    {designerApprovedTalk === DesignerDecisionTalk.WILL_TALK ? \n                    <Popconfirm title={\"Are you sure?\"}>\n                        <Radio.Group onChange={(e) => updateDecision(communicationId, e.target.value)} value={decision}>\n                            <Radio.Button value={EmployerDecisionHire.UNDECIDED}>Still In Talks</Radio.Button>\n                            <Radio.Button value={EmployerDecisionHire.REJECT}>Reject</Radio.Button>\n                            <Radio.Button value={EmployerDecisionHire.HIRE}>Hire</Radio.Button>\n                        </Radio.Group>\n                    </Popconfirm> \n                    : designerApprovedTalk === DesignerDecisionTalk.UNDECIDED ? \n                    <Typography.Text>We are contacting {fullName} to inform them you are interested.</Typography.Text>\n                    : null}\n                </List.Item>\n            )}\n        />\n    )\n}\n\nexport default EmployerCommList"]},"metadata":{},"sourceType":"module"}