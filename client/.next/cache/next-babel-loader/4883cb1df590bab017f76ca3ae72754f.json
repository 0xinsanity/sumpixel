{"ast":null,"code":"const SERVER_BASE = 'https://sumpixel-server.herokuapp.com/';\n\nasync function request(url, params, method = 'GET') {\n  const options = {\n    method,\n    mode: 'no-cors',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (params) {\n    if (method === 'GET') {\n      url += '?' + objectToQueryString(params);\n    } else {\n      options[\"body\"] = JSON.stringify(params);\n    }\n  }\n\n  const response = await fetch(SERVER_BASE + url, options);\n  console.log(response);\n\n  if (response.status !== 200) {\n    return generateErrorResponse('The server responded with an unexpected status.');\n  }\n\n  const result = await response.json();\n  return result;\n}\n\nfunction objectToQueryString(obj) {\n  return Object.keys(obj).map(key => key + '=' + obj[key]).join('&');\n}\n\nfunction generateErrorResponse(message) {\n  return {\n    status: 'error',\n    message\n  };\n}\n\nexport const didCompleteQuiz = async id => {\n  return await request('user-finished-quiz', {\n    id: id\n  });\n};\nexport const getUser = async id => {\n  return await request('get-user', {\n    id: id\n  });\n};\nexport const createUser = async user => {\n  return await request('create-user', user, 'POST');\n};","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-client/lib/server.tsx"],"names":["SERVER_BASE","request","url","params","method","options","mode","headers","objectToQueryString","JSON","stringify","response","fetch","console","log","status","generateErrorResponse","result","json","obj","Object","keys","map","key","join","message","didCompleteQuiz","id","getUser","createUser","user"],"mappings":"AAEA,MAAMA,WAAW,GAAG,wCAApB;;AAEA,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAAM,GAAG,KAA7C,EAAoD;AAChD,QAAMC,OAAO,GAAG;AACZD,IAAAA,MADY;AAEZE,IAAAA,IAAI,EAAE,SAFM;AAGZC,IAAAA,OAAO,EAAE;AACT,sBAAgB;AADP;AAHG,GAAhB;;AAQA,MAAIJ,MAAJ,EAAY;AACR,QAAIC,MAAM,KAAK,KAAf,EAAsB;AAClBF,MAAAA,GAAG,IAAI,MAAMM,mBAAmB,CAACL,MAAD,CAAhC;AACH,KAFD,MAEO;AACHE,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkBI,IAAI,CAACC,SAAL,CAAeP,MAAf,CAAlB;AACH;AACJ;;AAED,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACZ,WAAW,GAAGE,GAAf,EAAoBG,OAApB,CAA5B;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;;AACA,MAAIA,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AACzB,WAAOC,qBAAqB,CAAC,iDAAD,CAA5B;AACH;;AAED,QAAMC,MAAM,GAAG,MAAMN,QAAQ,CAACO,IAAT,EAArB;AAEA,SAAOD,MAAP;AAEH;;AAED,SAAST,mBAAT,CAA6BW,GAA7B,EAAkC;AAC9B,SAAOC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,GAAjB,CAAqBC,GAAG,IAAIA,GAAG,GAAG,GAAN,GAAYJ,GAAG,CAACI,GAAD,CAA3C,EAAkDC,IAAlD,CAAuD,GAAvD,CAAP;AACH;;AAED,SAASR,qBAAT,CAA+BS,OAA/B,EAAwC;AACpC,SAAO;AACHV,IAAAA,MAAM,EAAG,OADN;AAEHU,IAAAA;AAFG,GAAP;AAIH;;AAED,OAAO,MAAMC,eAAe,GAAG,MAAOC,EAAP,IAAsB;AACjD,SAAO,MAAM1B,OAAO,CAAC,oBAAD,EAAuB;AAAC0B,IAAAA,EAAE,EAAEA;AAAL,GAAvB,CAApB;AACH,CAFM;AAIP,OAAO,MAAMC,OAAO,GAAG,MAAOD,EAAP,IAAsB;AACzC,SAAO,MAAM1B,OAAO,CAAC,UAAD,EAAa;AAAC0B,IAAAA,EAAE,EAAEA;AAAL,GAAb,CAApB;AACH,CAFM;AAIP,OAAO,MAAME,UAAU,GAAG,MAAOC,IAAP,IAAsB;AAC5C,SAAO,MAAM7B,OAAO,CAAC,aAAD,EAAgB6B,IAAhB,EAAsB,MAAtB,CAApB;AACH,CAFM","sourcesContent":["import { User } from \"../model/model\";\n\nconst SERVER_BASE = 'https://sumpixel-server.herokuapp.com/'\n\nasync function request(url, params, method = 'GET') {\n    const options = {\n        method,\n        mode: 'no-cors' as RequestMode,\n        headers: {\n        'Content-Type': 'application/json'\n        }\n    };\n\n    if (params) {\n        if (method === 'GET') {\n            url += '?' + objectToQueryString(params);\n        } else {\n            options[\"body\"] = JSON.stringify(params);\n        }\n    }\n\n    const response = await fetch(SERVER_BASE + url, options);\n    console.log(response)\n    if (response.status !== 200) {\n        return generateErrorResponse('The server responded with an unexpected status.');\n    }\n\n    const result = await response.json();\n\n    return result;\n\n}\n\nfunction objectToQueryString(obj) {\n    return Object.keys(obj).map(key => key + '=' + obj[key]).join('&');\n}\n\nfunction generateErrorResponse(message) {\n    return {\n        status : 'error',\n        message\n    };\n}\n\nexport const didCompleteQuiz = async (id: string) => {\n    return await request('user-finished-quiz', {id: id})\n}\n\nexport const getUser = async (id: string) => {\n    return await request('get-user', {id: id})\n}\n\nexport const createUser = async (user: User) => {\n    return await request('create-user', user, 'POST')\n}"]},"metadata":{},"sourceType":"module"}