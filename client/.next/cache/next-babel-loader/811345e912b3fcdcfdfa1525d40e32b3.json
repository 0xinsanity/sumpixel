{"ast":null,"code":"import React, { useContext, useState, useEffect } from 'react';\nimport { UserContext } from '../../../lib/UserProvider';\nimport QuizScreen from '../../OnboardingFlow/Designers/QuizScreen';\nimport { getDesignCommunicationsList, updateDesignerDecision, modifyUser } from '../../../lib/server';\nimport { Typography, message } from 'antd';\nimport Loading from '../../General/Loading';\nimport CommunicationsList from './CommunicationsList';\n\nconst ViewCommunications = props => {\n  const {\n    currentUser,\n    changeUser\n  } = useContext(UserContext);\n  const [commList, setCommList] = useState(undefined);\n\n  const updateUser = async updatedUser => {\n    changeUser(updatedUser);\n    await modifyUser(updatedUser);\n  };\n\n  const updateDesignerText = async (commId, update) => {\n    await updateDesignerDecision(commId, update);\n    message.success(\"Updated Decision\");\n    setCommList((await getDesignCommunicationsList(currentUser.id)));\n  };\n\n  useEffect(() => {\n    getDesignCommunicationsList(currentUser.id).then(commList => {\n      setCommList(commList);\n    });\n  }, []);\n\n  if (!currentUser.completedQuiz) {\n    return /*#__PURE__*/React.createElement(QuizScreen, {\n      isDashboard: true,\n      changeCurrentUser: updateUser\n    });\n  }\n\n  if (!currentUser.graded) {\n    return /*#__PURE__*/React.createElement(Typography, null, \"It looks you have not been reviewed by our staff yet. Check back later!\");\n  } else {\n    if (currentUser.communications === null || currentUser.communications === []) {\n      return /*#__PURE__*/React.createElement(Typography, null, \"Our employers are currently taking a look at your profile and will reach out if they express interest in you.\");\n    } else {\n      if (commList == undefined) {\n        return /*#__PURE__*/React.createElement(Loading, null);\n      } else {\n        return /*#__PURE__*/React.createElement(CommunicationsList, {\n          communicationList: commList,\n          updateDesignerText: updateDesignerText\n        });\n      }\n    }\n  }\n};\n\nexport default ViewCommunications;","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-client/components/Dashboard/Designer/ViewCommunications.tsx"],"names":["React","useContext","useState","useEffect","UserContext","QuizScreen","getDesignCommunicationsList","updateDesignerDecision","modifyUser","Typography","message","Loading","CommunicationsList","ViewCommunications","props","currentUser","changeUser","commList","setCommList","undefined","updateUser","updatedUser","updateDesignerText","commId","update","success","id","then","completedQuiz","graded","communications"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,SAArC,QAAqD,OAArD;AACA,SAAQC,WAAR,QAA0B,2BAA1B;AACA,OAAOC,UAAP,MAAuB,2CAAvB;AACA,SAAQC,2BAAR,EAAqCC,sBAArC,EAA6DC,UAA7D,QAA8E,qBAA9E;AAEA,SAAQC,UAAR,EAAoBC,OAApB,QAAkC,MAAlC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,MAAMC,kBAA4B,GAAIC,KAAD,IAAW;AAC5C,QAAM;AAACC,IAAAA,WAAD;AAAcC,IAAAA;AAAd,MAA6Bf,UAAU,CAACG,WAAD,CAA7C;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAgCiB,SAAhC,CAAxC;;AAEA,QAAMC,UAAU,GAAG,MAAOC,WAAP,IAA6B;AAC5CL,IAAAA,UAAU,CAACK,WAAD,CAAV;AACA,UAAMb,UAAU,CAACa,WAAD,CAAhB;AACH,GAHD;;AAKA,QAAMC,kBAAkB,GAAG,OAAOC,MAAP,EAAuBC,MAAvB,KAAwD;AAC/E,UAAMjB,sBAAsB,CAACgB,MAAD,EAASC,MAAT,CAA5B;AACAd,IAAAA,OAAO,CAACe,OAAR,CAAgB,kBAAhB;AACAP,IAAAA,WAAW,EAAC,MAAMZ,2BAA2B,CAACS,WAAW,CAACW,EAAb,CAAlC,EAAX;AACH,GAJD;;AAMAvB,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,2BAA2B,CAACS,WAAW,CAACW,EAAb,CAA3B,CAA4CC,IAA5C,CAAkDV,QAAD,IAAiC;AAC9EC,MAAAA,WAAW,CAACD,QAAD,CAAX;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAI,CAAGF,WAAD,CAAsBa,aAA5B,EAA4C;AACxC,wBAAQ,oBAAC,UAAD;AAAY,MAAA,WAAW,EAAE,IAAzB;AAA+B,MAAA,iBAAiB,EAAER;AAAlD,MAAR;AACH;;AAED,MAAI,CAAEL,WAAD,CAAsBc,MAA3B,EAAmC;AAC/B,wBAAQ,oBAAC,UAAD,kFAAR;AACH,GAFD,MAEO;AACH,QAAKd,WAAD,CAAsBe,cAAtB,KAAyC,IAAzC,IAAkDf,WAAD,CAAsBe,cAAtB,KAAyC,EAA9F,EAAkG;AAC9F,0BAAQ,oBAAC,UAAD,wHAAR;AACH,KAFD,MAEO;AACH,UAAIb,QAAQ,IAAIE,SAAhB,EAA2B;AACvB,4BAAQ,oBAAC,OAAD,OAAR;AACH,OAFD,MAEO;AACH,4BAAQ,oBAAC,kBAAD;AAAoB,UAAA,iBAAiB,EAAEF,QAAvC;AAAiD,UAAA,kBAAkB,EAAEK;AAArE,UAAR;AACH;AACJ;AACJ;AACJ,CAtCD;;AAwCA,eAAeT,kBAAf","sourcesContent":["import React, {useContext, useState, useEffect} from 'react'\nimport {UserContext} from '../../../lib/UserProvider'\nimport QuizScreen from '../../OnboardingFlow/Designers/QuizScreen'\nimport {getDesignCommunicationsList, updateDesignerDecision, modifyUser} from '../../../lib/server'\nimport {User, CommForDesigner, DesignerDecisionTalk} from '../../../model/model'\nimport {Typography, message} from 'antd'\nimport Loading from '../../General/Loading'\nimport CommunicationsList from './CommunicationsList'\n\nconst ViewCommunications: React.FC = (props) => {\n    const {currentUser, changeUser}  = useContext(UserContext)\n    const [commList, setCommList] = useState<CommForDesigner[] | undefined>(undefined)\n\n    const updateUser = async (updatedUser: User) => {\n        changeUser(updatedUser)\n        await modifyUser(updatedUser)\n    }\n\n    const updateDesignerText = async (commId: string, update: DesignerDecisionTalk) => {\n        await updateDesignerDecision(commId, update)\n        message.success(\"Updated Decision\")\n        setCommList(await getDesignCommunicationsList(currentUser.id))\n    }\n\n    useEffect(() => {\n        getDesignCommunicationsList(currentUser.id).then((commList: CommForDesigner[]) => {\n            setCommList(commList)\n        })\n    }, [])\n\n    if (!((currentUser as User).completedQuiz)) {\n        return (<QuizScreen isDashboard={true} changeCurrentUser={updateUser}/>)\n    }\n\n    if (!(currentUser as User).graded) {\n        return (<Typography>It looks you have not been reviewed by our staff yet. Check back later!</Typography>)\n    } else {\n        if ((currentUser as User).communications === null || (currentUser as User).communications === []) {\n            return (<Typography>Our employers are currently taking a look at your profile and will reach out if they express interest in you.</Typography>)\n        } else {\n            if (commList == undefined) {\n                return (<Loading />)\n            } else {\n                return (<CommunicationsList communicationList={commList} updateDesignerText={updateDesignerText}/>)\n            }\n        }\n    }\n}\n\nexport default ViewCommunications"]},"metadata":{},"sourceType":"module"}