{"ast":null,"code":"import React, { useContext, useState } from 'react';\nimport { Radio, Button, Col, Typography } from 'antd';\nimport _ from 'lodash';\nimport { removeUser } from '../../../lib/server';\nimport Router from 'next/router';\nimport { UserContext } from '../../../lib/UserProvider';\nimport { ReactTypeformEmbed } from 'react-typeform-embed';\nimport styled from 'styled-components';\nconst Cont = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center\n`;\n\nconst QuizScreen = props => {\n  const {\n    changeCurrentUser,\n    changeStep,\n    isDashboard\n  } = props;\n  const {\n    currentUser\n  } = useContext(UserContext);\n  const designerTypes = [{\n    name: \"UI\",\n    link: \"https://sumpixelbiz.typeform.com/to/riENWs?id=\" + currentUser.id\n  }, {\n    name: \"UX\",\n    link: \"https://sumpixelbiz.typeform.com/to/TqV8Jo?id=\" + currentUser.id\n  }, {\n    name: \"Brand\",\n    link: \"https://sumpixelbiz.typeform.com/to/BOBhxP?id=\" + currentUser.id\n  }, {\n    name: \"Product\",\n    link: \"https://sumpixelbiz.typeform.com/to/irGM8E?id=\" + currentUser.id\n  }];\n  const [currentQuiz, changeQuiz] = useState(designerTypes[0]);\n\n  const goBack = async () => {\n    await removeUser(currentUser.id);\n    changeStep(-1);\n  };\n\n  const onChange = updateQuiz => {\n    changeQuiz(updateQuiz);\n  };\n\n  const submit = () => {\n    currentUser[\"designType\"] = currentQuiz.name;\n    currentUser[\"completedQuiz\"] = true;\n    changeCurrentUser(currentUser);\n    Router.replace('/dashboard_user');\n  };\n\n  return /*#__PURE__*/React.createElement(Cont, null, /*#__PURE__*/React.createElement(Typography.Title, {\n    style: {\n      textAlign: 'center'\n    },\n    level: 4\n  }, \"Click one of the following categories to be redirected to your quiz. When you complete your quiz, return here and refresh the page!\"), /*#__PURE__*/React.createElement(Col, {\n    style: {\n      marginTop: 20,\n      marginBottom: 20\n    }\n  }, /*#__PURE__*/React.createElement(Radio.Group, {\n    onChange: e => onChange(e.target.value),\n    value: currentQuiz\n  }, _.map(designerTypes, type => {\n    return /*#__PURE__*/React.createElement(Radio.Button, {\n      value: type.name\n    }, type.name);\n  }))), /*#__PURE__*/React.createElement(ReactTypeformEmbed, {\n    style: {\n      height: '100%'\n    },\n    url: currentQuiz.link,\n    onSubmit: submit\n  }), isDashboard === null ? /*#__PURE__*/React.createElement(Button, {\n    style: {\n      marginTop: 20\n    },\n    type: \"default\",\n    onClick: goBack\n  }, \"Back\") : null);\n};\n\nexport default QuizScreen;","map":{"version":3,"sources":["/Users/insanity/Documents/personalprojects/sumpixel-client/components/OnboardingFlow/Designers/QuizScreen.tsx"],"names":["React","useContext","useState","Radio","Button","Col","Typography","_","removeUser","Router","UserContext","ReactTypeformEmbed","styled","Cont","div","QuizScreen","props","changeCurrentUser","changeStep","isDashboard","currentUser","designerTypes","name","link","id","currentQuiz","changeQuiz","goBack","onChange","updateQuiz","submit","replace","textAlign","marginTop","marginBottom","e","target","value","map","type","height"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react'\nimport { Form, Radio, Button, Checkbox, Row, Col, Select, Upload, message, Typography } from 'antd';\nimport _ from 'lodash'\nimport FormProps from '../FormProps'\nimport {removeUser, didCompleteQuiz} from '../../../lib/server'\nimport Router from 'next/router'\nimport {UserContext} from '../../../lib/UserProvider'\nimport { ReactTypeformEmbed } from 'react-typeform-embed';\nimport styled from 'styled-components'\n\nconst Cont = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center\n`\n\ninterface QuizScreenProps extends FormProps {\n    isDashboard?: boolean\n}\n\ninterface QuizProp {\n    link: string, \n    name: string\n}\n\nconst QuizScreen: React.FC<QuizScreenProps> = (props) => {\n    const {changeCurrentUser, changeStep, isDashboard} = props\n    const {currentUser}  = useContext(UserContext)\n\n    const designerTypes = [{name: \"UI\", link: \"https://sumpixelbiz.typeform.com/to/riENWs?id=\" + currentUser.id}, \n                            {name: \"UX\", link: \"https://sumpixelbiz.typeform.com/to/TqV8Jo?id=\" + currentUser.id}, \n                            {name: \"Brand\", link: \"https://sumpixelbiz.typeform.com/to/BOBhxP?id=\" + currentUser.id}, \n                            {name: \"Product\", link: \"https://sumpixelbiz.typeform.com/to/irGM8E?id=\" + currentUser.id}]\n\n    const [currentQuiz, changeQuiz] = useState<QuizProp>(designerTypes[0])\n\n    const goBack = async () => {\n        await removeUser(currentUser.id)\n        changeStep(-1)\n    }\n\n    const onChange = (updateQuiz: QuizProp) => {\n        changeQuiz(updateQuiz)\n    }\n\n    const submit = () => {\n        currentUser[\"designType\"] = currentQuiz.name\n        currentUser[\"completedQuiz\"] = true\n        changeCurrentUser(currentUser)\n        Router.replace('/dashboard_user')\n    }\n\n    return (\n        <Cont>\n            <Typography.Title style={{textAlign: 'center'}} level={4}>\n                Click one of the following categories to be redirected to your quiz. When you complete your quiz, return here and refresh the page!\n            </Typography.Title>\n            <Col style={{marginTop: 20, marginBottom: 20}}>\n                <Radio.Group onChange={(e) => onChange(e.target.value)} value={currentQuiz}>\n                    {_.map(designerTypes, (type: QuizProp) => {\n                        return <Radio.Button value={type.name}>{type.name}</Radio.Button>\n                    })}\n                </Radio.Group>\n                \n            </Col>\n            <ReactTypeformEmbed style={{height: '100%'}} url={currentQuiz.link} onSubmit={submit}/>\n            {isDashboard === null ? \n                <Button style={{marginTop: 20}} type=\"default\" onClick={goBack}>\n                    Back\n                </Button> \n            : null}\n        </Cont>\n    );\n}\n\nexport default QuizScreen"]},"metadata":{},"sourceType":"module"}