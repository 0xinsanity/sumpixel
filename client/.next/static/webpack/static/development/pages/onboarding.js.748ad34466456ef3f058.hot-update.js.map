{"version":3,"file":"static/webpack/static/development/pages/onboarding.js.748ad34466456ef3f058.hot-update.js","sources":["webpack:///./components/General/LocationAutocomplete.tsx"],"sourcesContent":["import PlacesAutocomplete, { Suggestion } from \"react-places-autocomplete\";\nimport {Input, Form, Typography} from 'antd'\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst PlaceTextContainer = styled.div`\n    width: 100%;\n    height: 45px;\n    padding: 4px;\n    padding-left: 14px;\n    border-bottom: 1px solid #DAE2EF;\n    border-left: 1px solid #DAE2EF;\n    border-right: 1px solid #DAE2EF;\n    display: flex;\n    align-items: center;\n`\n\nconst PlaceText = styled(Typography.Text)`\n    font-family: 'Mark Pro';\n    overflow: hidden;\n`\n\nexport const LocationAutocomplete: React.FC<{defaultValue: string, isModifyProfilePage: boolean}> = (props) => {\n    return (\n        <Form.Item\n            label=\"Location\"\n            name=\"location\"\n            rules={[{ required: !props.isModifyProfilePage, message: !props.isModifyProfilePage ? `Location is required` : '' }]}\n        >\n            <PlacesAutocomplete>\n                {({ getInputProps, getSuggestionItemProps, suggestions, loading }) => (\n                    <>\n                        <Input \n                            {...getInputProps({\n                                id: \"address-input\"\n                            })}\n                            defaultValue={props.defaultValue} \n                            placeholder=\"New York City\"/>\n                        <PlaceText className=\"autocomplete-dropdown-container\">\n                                {loading ? <PlaceTextContainer><PlaceText>Loading...</PlaceText></PlaceTextContainer> : null}\n                                {suggestions.map((suggestion: Suggestion) => {\n                                    const className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\";\n                                    const style = suggestion.active\n                                    ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n                                    : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n\n                                    const spread: any = {\n                                    ...getSuggestionItemProps(suggestion, {\n                                        className,\n                                        style\n                                    })\n                                    };\n\n                                    return (\n                                    <PlaceTextContainer {...spread} key={suggestion.id}>\n                                        <PlaceText>{suggestion.description}</PlaceText>\n                                    </PlaceTextContainer>\n                                    );\n                                })}\n                        </PlaceText>  \n                    </>\n                )}         \n            </PlacesAutocomplete>\n        </Form.Item>\n    )\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAAA;AAYA;;;AAAA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AAAA;AAAA;AAAA;AAIA;AADA;AAGA;AACA;AALA;AAMA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AADA;AAOA;AACA;AAAA;AAIA;AAOA;;;;A","sourceRoot":""}