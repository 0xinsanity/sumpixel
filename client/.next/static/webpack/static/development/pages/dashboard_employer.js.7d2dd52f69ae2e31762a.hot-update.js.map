{"version":3,"file":"static/webpack/static/development/pages/dashboard_employer.js.7d2dd52f69ae2e31762a.hot-update.js","sources":["webpack:///./components/Dashboard/Employer/DesignerList.tsx","webpack:///./components/Dashboard/Employer/EmployerCommList.tsx"],"sourcesContent":["import React, {useEffect, useContext, useState} from 'react'\nimport { createCommunication } from '../../../lib/server'\nimport { User, Employer, UNIVERSAL_COLOR } from '../../../model/model'\nimport {UserContext} from '../../../lib/UserProvider'\nimport {Container} from '../../General/Container'\nimport Loading from '../../General/Loading'\nimport {Table, Button, Typography} from 'antd'\nimport DesignerInfoModal from './DesignerInfoModal'\nimport styled from 'styled-components'\nconst {Column} = Table\n\nconst NameTitle = styled(Typography)`\n    color: #000000;\n    font-family: 'Mark Pro Bold';\n    font-size: 16px;\n`\n\nconst ResponseTitle = styled(Typography)`\n    color: #000000;\n    opacity: 0.5;\n    font-size; 14px;\n    font-family: 'Mark Pro';\n`\n\nexport const BigBlackButton = styled(Button)`\n    background: #000;\n    color: #fff;\n    border-radius: 2px;\n    border: none;\n    padding: 15px 24px;\n    height: auto;\n    font-family: 'Mark Pro';\n\n    &:hover {\n        background: #DAE2EF;\n        color: #000;\n    }\n\n    &:focus {\n        background: #000;\n        color: #fff;\n    }\n`\n\nexport interface FindDesignerListType {\n    name_feedback: string[],\n    score: number,\n    expiration: string,\n    primary_skill: string,\n    contact: User\n}\n\ninterface DesignerListProps {\n    designerList: FindDesignerListType[]\n}\n\nconst DesignerList: React.FC<DesignerListProps> = (props) => {\n    const {currentUser, changeUser}  = useContext(UserContext)\n    const {designerList} = props\n    const [showModal, setModalVisibility] = useState(false) \n    const [currentDesigner, setCurrentDesigner] = useState<User>(undefined) \n\n    const onMoreInfo = (user: User) => {\n        setCurrentDesigner(user)\n        setModalVisibility(true)\n    }\n\n    const onConnect = async (designerId: string) => {\n        window.analytics.track((currentUser as Employer).companyName + ' connects to designer');\n        const comm = await createCommunication(designerId, currentUser.id)\n        setModalVisibility(false)\n        const newUser = {...currentUser, communications: [...currentUser.communications, comm.id]}\n        changeUser(newUser)\n    }\n\n    return (\n        <>\n            <DesignerInfoModal setInvisible={() => setModalVisibility(false)}\n                                visible={showModal}\n                               designer={currentDesigner}\n                               onConnect={onConnect}/>\n            <Table\n                style={{paddingBottom: 10, width: '100%', fontFamily: 'Mark Pro Bold', fontWeight: 'normal'}}\n                size={\"large\"}\n                dataSource={designerList}\n                bordered={false}\n            >\n                <Column width={'35%'} title=\"Name\" dataIndex=\"name_feedback\" key=\"name_feedback\" render={(name_feedback) => (\n                    <>\n                        <NameTitle>{name_feedback[0]}</NameTitle>\n                        <ResponseTitle>{name_feedback[1]}</ResponseTitle>\n                    </>\n                )}/>\n                <Column onCell={(data, index) => ({style: {color: UNIVERSAL_COLOR, fontWeight: 700}})} align={'center'} title=\"Score\" dataIndex=\"score\" key=\"score\" />\n                <Column align={'center'} title=\"Expiration\" dataIndex=\"expiration\" key=\"expiration\" />\n                <Column align={'center'} title=\"Primary Skill\" dataIndex=\"primary_skill\" key=\"primary_skill\" />\n                <Column align={'center'} title=\"Contact\" dataIndex=\"contact\" key=\"contact\" render={(contact) => (\n                    <BigBlackButton onClick={() => onMoreInfo(contact)}>\n                        Request Call\n                    </BigBlackButton>\n                )} />\n            </Table>\n        </>)\n}\n\nexport default DesignerList","import React, {useState} from 'react'\nimport {UserContext} from '../../../lib/UserProvider'\nimport QuizScreen from '../../OnboardingFlow/Designers/QuizScreen'\nimport {getDesignerFromCommunication} from '../../../lib/server'\nimport {User, DesignerDecisionTalk, EmployerDecisionHire, CommForEmployer} from '../../../model/model'\nimport DesignerInfoModal from './DesignerInfoModal'\nimport {Typography, List, Radio, Popconfirm, Table} from 'antd'\nimport {BigBlackButton} from './DesignerList'\nconst {Column} = Table\n\ninterface CommunicationsListProps {\n    communicationList: CommForEmployer[]\n    updateDecision: (commId: string, update: EmployerDecisionHire) => void\n}\n\nconst EmployerCommList: React.FC<CommunicationsListProps> = (props) => {\n    const {communicationList, updateDecision} = props\n    const [showModal, setModalVisibility] = useState(false) \n    const [currentDesigner, setCurrentDesigner] = useState<User>(undefined) \n\n    const decisionToText = (dec: DesignerDecisionTalk): string => {\n        switch (dec) {\n            case DesignerDecisionTalk.UNDECIDED:\n                return 'Reviewing Your Request'\n            case DesignerDecisionTalk.WILL_TALK:\n                return `Willing to Talk`\n            case DesignerDecisionTalk.WILL_NOT_TALK:\n                return `Declines to Talk`\n        }\n    }\n\n    const onMoreInfo = async (commId: string) => {\n        const user = await getDesignerFromCommunication(commId)\n        setCurrentDesigner(user)\n        setModalVisibility(true)\n    }\n\n\n    return (\n        <>\n        <DesignerInfoModal setInvisible={() => setModalVisibility(false)}\n                                visible={showModal}\n                               designer={currentDesigner}/>\n        <Table\n                style={{paddingBottom: 10, width: '100%', fontFamily: 'Mark Pro Bold', fontWeight: 'normal'}}\n                size={\"large\"}\n                dataSource={communicationList}\n                bordered={false}\n            >\n                <Column width={'35%'} title=\"Name\" dataIndex=\"fullName\" key=\"fullName\" />\n                <Column title=\"Designer's Status\" dataIndex=\"designerApprovedTalk\" key=\"designerApprovedTalk\" render={(text) => (\n                    <Typography.Text style={{color: '#000'}}>{decisionToText(text)}</Typography.Text>\n                )}/>\n                <Column align={'center'} title=\"Decision\" dataIndex=\"decision\" key=\"decision\" render={(text, record, index) => (\n                    <Popconfirm title={\"Are you sure?\"}>\n                        <Radio.Group onChange={(e) => updateDecision(communicationList[index].communicationId, e.target.value)} value={text}>\n                            <Radio.Button value={EmployerDecisionHire.UNDECIDED}>Still In Talks</Radio.Button>\n                            <Radio.Button value={EmployerDecisionHire.REJECT}>Reject</Radio.Button>\n                            <Radio.Button value={EmployerDecisionHire.HIRE}>Hire</Radio.Button>\n                        </Radio.Group>\n                    </Popconfirm> \n                )} />\n                <Column align={'center'} title=\"Info\" dataIndex=\"communicationId\" key=\"communicationId\" render={(communicationId) => (\n                    <BigBlackButton onClick={() => onMoreInfo(communicationId)}>\n                        More Info\n                    </BigBlackButton>\n                )} />\n                 />\n            </Table>\n            </>\n    )\n}\n\nexport default EmployerCommList"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAEA;;;;AAAA;AAMA;;;;;AAAA;AAOA;;;;;;;;;;;;;;;;;;AAAA;AACA;AA+BA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AAOA;AACA;AACA;;;;;;;;;;;;ACzGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AADA;AASA;AACA;AACA;;;;A","sourceRoot":""}