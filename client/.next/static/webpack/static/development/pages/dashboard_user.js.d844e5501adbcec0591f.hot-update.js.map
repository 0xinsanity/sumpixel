{"version":3,"file":"static/webpack/static/development/pages/dashboard_user.js.d844e5501adbcec0591f.hot-update.js","sources":["webpack:///./components/Dashboard/Designer/CommunicationsList.tsx"],"sourcesContent":["import React, {useContext} from 'react'\nimport {UserContext} from '../../../lib/UserProvider'\nimport QuizScreen from '../../OnboardingFlow/Designers/QuizScreen'\nimport {createUser} from '../../../lib/server'\nimport {User, DesignerDecisionTalk, EmployerDecisionHire, CommForDesigner} from '../../../model/model'\nimport {Popconfirm, Typography, Table, Radio} from 'antd'\nconst {Column} = Table\n\ninterface CommunicationsListProps {\n    communicationList: CommForDesigner[]\n    updateDesignerText: (commId: string, update: DesignerDecisionTalk) => void\n}\n\nconst CommunicationsList: React.FC<CommunicationsListProps> = (props) => {\n    const {communicationList, updateDesignerText} = props\n\n    const decisionToText = (dec: EmployerDecisionHire): string => {\n        switch (dec) {\n            case EmployerDecisionHire.UNDECIDED:\n                return `Reviewing your profile`\n            case EmployerDecisionHire.HIRE:\n                return `Wants to hire you`\n            case EmployerDecisionHire.REJECT:\n                return `Rejected your profile`\n        }\n    }\n\n    return (\n        <Table\n        style={{paddingBottom: 10, width: '100%', fontFamily: 'Mark Pro Bold', fontWeight: 'normal'}}\n        size={\"large\"}\n        dataSource={communicationList}\n        bordered={false}\n    >\n        <Column width={'35%'} title=\"Company Name\" dataIndex=\"companyName\" key=\"companyName\" />\n        <Column title=\"Company Status\" dataIndex=\"decision\" key=\"decision\" render={(text) => (\n            <Typography.Text style={{color: '#000'}}>{decisionToText(text)}</Typography.Text>\n        )}/>\n        <Column align={'center'} title=\"Decision\" dataIndex=\"designerApprovedTalk\" key=\"designerApprovedTalk\" render={(text, record, index) => (\n            <Popconfirm title={\"Are you sure?\"}>\n                <Radio.Group onChange={(e) => updateDesignerText(communicationList[index].communicationId, e.target.value)} value={text}>\n                    <Radio.Button value={DesignerDecisionTalk.UNDECIDED}>Undecided</Radio.Button>\n                    <Radio.Button value={DesignerDecisionTalk.WILL_TALK}>Will Talk</Radio.Button>\n                    <Radio.Button value={DesignerDecisionTalk.WILL_NOT_TALK}>Will Not Talk</Radio.Button>\n                </Radio.Group>\n            </Popconfirm> \n        )} />\n    </Table>\n    )\n}\n\nexport default CommunicationsList"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AALA;AAWA;AACA;AACA;;;;A","sourceRoot":""}