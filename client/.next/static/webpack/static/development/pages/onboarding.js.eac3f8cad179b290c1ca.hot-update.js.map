{"version":3,"file":"static/webpack/static/development/pages/onboarding.js.eac3f8cad179b290c1ca.hot-update.js","sources":["webpack:///./components/General/Loading.tsx","webpack:///./components/General/OpenPage.tsx","webpack:///./components/OnboardingFlow/Designers/FormPersonalData.tsx","webpack:///./components/OnboardingFlow/Employers/FormBusinessData.tsx","webpack:///./components/OnboardingFlow/Onboard.tsx","webpack:///./lib/UserProvider.tsx","webpack:///./lib/server.tsx","webpack:///./pages/onboarding.tsx"],"sourcesContent":["import React from 'react'\nimport {Spin} from 'antd'\nimport styled from 'styled-components'\n\nconst Cont = styled.div`\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    position: fixed;\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n    background-color: #fff;\n`\n\nconst Loading: React.FC<{loading?: boolean}> = (props) => {\n    return (\n        <Cont style={{zIndex: props.loading === undefined || props.loading ? 10 : -10}}>\n            <Spin size=\"large\" />\n        </Cont>\n    )\n}\n\nexport default Loading","import Router from 'next/router'\n\nconst OpenPage = (setLoading: (newLoad: boolean) => void, new_page: string) => {\n    Router.push(new_page).then(() => {\n        setLoading(false)\n    })\n}\n\nexport default OpenPage","import React, {useState, useContext} from 'react'\nimport { Form, Input, Button, Checkbox, Row, Col, Select, Upload, message } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport _ from 'lodash'\nimport {User, VisaStatus, NavBarStatus, UNIVERSAL_COLOR} from '../../../model/model'\nimport FormProps from '../FormProps'\nimport {UploadFile} from 'antd/lib/upload/interface'\nimport {storage_ref, myFirebase} from '../../../lib/firebase'\nimport {removeUser} from '../../../lib/server'\nimport {UserContext} from '../../../lib/UserProvider'\nimport Loading from '../../General/Loading'\nimport {BigBlackButton} from '../../General/BigBlackButton'\nimport Router from 'next/router';\nimport OpenPage from '../../General/OpenPage'\nconst {Option} = Select\n\ninterface FormPersonalDataProps extends FormProps {\n    modifyProfile?: boolean\n}\n\nconst FormPersonalData: React.FC<FormPersonalDataProps> = (props) => {\n    const {changeCurrentUser, changeStep, changeNavbarStatus, modifyProfile} = props\n    const isModifyProfilePage = modifyProfile !== undefined\n    const {currentUser, changeUser, loading, setLoading}  = useContext(UserContext)\n    const [checked, changeChecked] = useState(false)\n    const [fileList, updateFileList] = useState<UploadFile[]>([])\n    const goBack = async () => {\n        changeNavbarStatus(NavBarStatus.Undecided)\n        changeStep(-1)\n        \n    }\n\n    if (currentUser == undefined) {\n        return (<Loading />)\n    }\n\n    const getRules = (name) => {\n        return [{ required: !isModifyProfilePage, message: !isModifyProfilePage ? `${name} is required` : '' }]\n    }\n\n    const updateUser = (values) => {\n        const newUser = {\n            email: currentUser.email,\n            id: currentUser.id,\n            firstName: currentUser.firstName,\n            lastName: currentUser.lastName,\n            phoneNumber: values.phoneNumber,\n            location: values.location,\n            salary: values.salary,\n            portfolio: values.portfolio,\n            preferredRole: values.preferredRole,\n            visa: values.visa_status,\n            resume: currentUser.id + '.pdf',\n            linkedin: values.linkedin,\n            dribbble: values.dribbble\n        }\n        console.table(_.pickBy(newUser, _.identity))\n\n        changeCurrentUser(_.pickBy(newUser, _.identity))\n\n        if (isModifyProfilePage) {\n            message.success(\"Profile Updated\")\n        } else {\n            changeStep(1)\n        }\n    }\n\n    const onFinish = (values) => {\n        if (!isModifyProfilePage && !checked) {\n            message.error('Please agree to the Terms of Service')\n            return\n        }\n\n        const res = values.resume\n        console.log(res)\n        if (res === undefined) {\n            updateUser(values)\n        } else {\n            storage_ref.child('resumes/' + currentUser.id + '.pdf').put(res.file[\"originFileObj\"]).then((snapshot) => {\n                updateUser(values)\n            })\n        }    \n    }\n\n    const viewProfile = () => {\n        OpenPage(setLoading, '/profile/' + currentUser.id)\n    }\n\n    const onFinishFailed = (values) => {\n        console.table(values)\n        message.error('There was an error completing your account. Ensure every field is filled out.')\n    }\n\n    return (\n        <Form\n            name=\"basic\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n            style={{marginBottom: 50}}\n        >\n            {!isModifyProfilePage ? \n                <>\n                    <Input.Group>\n                        <Row>\n                            <Col span={11}>\n                                <Form.Item\n                                    label=\"First Name\"\n                                    name=\"firstName\"\n                                >\n                                    <Input disabled placeholder=\"First Name\" defaultValue={currentUser.firstName}/>\n                                </Form.Item>\n                            </Col>\n                            <Col span={2}/>\n                            <Col span={11}>\n                                <Form.Item\n                                        label=\"Last Name\"\n                                        name=\"lastName\"\n                                >\n                                    <Input disabled placeholder=\"Last Name\" defaultValue={currentUser.lastName}/>\n                                </Form.Item>\n                            </Col>\n                        </Row>\n                    </Input.Group>\n\n                    <Form.Item\n                        label=\"Email\"\n                        name=\"email\"\n                    >\n                        <Input disabled defaultValue={currentUser.email}/>\n                    </Form.Item>\n                </>\n            : null}\n\n            <Form.Item\n                label=\"Phone Number\"\n                name=\"phoneNumber\"\n                rules={getRules(\"Phone Number\")}\n            >\n                <Input defaultValue={isModifyProfilePage ? '' : currentUser.phoneNumber || \"\"} placeholder=\"+1 (555) 555-5555\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Location\"\n                name=\"location\"\n                rules={getRules(\"Location\")}\n            >\n                <Input defaultValue={isModifyProfilePage ? '' : currentUser.location || \"\"} placeholder=\"New York City\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Desired Salary\"\n                name=\"salary\"\n                rules={getRules(\"Desired Salary\")}\n            >\n                <Input defaultValue={isModifyProfilePage ? '' : (currentUser as User).salary || \"\"} placeholder=\"$100,000-$150,000 per year\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Preferred Role\"\n                name=\"preferredRole\"\n                rules={getRules(\"Preferred Role\")}\n            >\n                <Input defaultValue={isModifyProfilePage ? '' : (currentUser as User).preferredRole || \"\"} placeholder=\"UI/UX Designer\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Portfolio\"\n                name=\"portfolio\"\n                rules={getRules(\"Portfolio\")}\n            >\n                <Input defaultValue={isModifyProfilePage ? '' : (currentUser as User).portfolio || \"\"} placeholder=\"https://www.myportfolio.com\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Resume\"\n                name=\"resume\"\n                rules={getRules(\"Resume\")}\n            >\n                <Upload \n                    name={'file'} \n                    accept={\".pdf\"} \n                    fileList={fileList}\n                    onChange={(info) => {\n                        let fileList_update = [...info.fileList];\n                        fileList_update = fileList_update.slice(-1);\n\n                        fileList_update = fileList_update.map(file => {\n                            if (file.response) {\n                                file.url = file.response.url;\n                            }\n                            if (file.status === 'error') {\n                                // TODO: Find better way of handling this\n                                file.status = 'done'\n                            }\n                            return file;\n                        });\n\n                        if (info.file.status === 'done') {\n                            message.success(`${info.file.name} file uploaded successfully`);\n                        } else if (info.file.status === 'error') {\n                            message.success(`${info.file.name} file uploaded successfully`);\n                        }\n\n                        updateFileList(fileList_update)\n                    }}>\n                    <Button>\n                        <UploadOutlined /> {!isModifyProfilePage ? \"Click to Upload\" : \"Upload New Resume\"}\n                    </Button>\n                </Upload>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Visa Status\"\n                name=\"visa_status\"\n                rules={getRules(\"Visa Status\")}\n                \n            >\n                <Select defaultValue={modifyProfile ? '' : (currentUser as User).visa || \"\"} placeholder=\"Select an option:\">\n                    {_.map(VisaStatus, (status) => {\n                        return <Option value={status}>{status}</Option>\n                    })}\n                </Select>\n            </Form.Item>\n\n            <Form.Item\n                label=\"LinkedIn\"\n                name=\"linkedin\"\n            >\n                <Input defaultValue={modifyProfile ? '' : (currentUser as User).linkedin || \"\"} placeholder=\"https://www.linkedin.com/in/username\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Dribbble\"\n                name=\"dribbble\"\n            >\n                <Input defaultValue={modifyProfile ? '' : (currentUser as User).dribbble || \"\"} placeholder=\"https://dribbble.com/username\"/>\n            </Form.Item>\n\n            {!isModifyProfilePage ? \n                <Form.Item \n                    valuePropName={'checked'}\n                >\n                    <Checkbox style={{fontFamily: 'Mark Pro'}} checked={checked} onChange={(e) => changeChecked(e.target.checked)}>Agree to the <a style={{color: UNIVERSAL_COLOR}} target={'_blank'} href={'/terms'}>Terms of Services</a></Checkbox>\n            </Form.Item> \n            : null}\n\n                <Form.Item>\n                    <Row justify=\"space-between\" align=\"middle\">\n                        {!isModifyProfilePage ? \n                        <BigBlackButton type=\"default\" onClick={goBack}>\n                            Back\n                        </BigBlackButton>\n                        : <BigBlackButton type=\"default\" onClick={viewProfile}>\n                            View Profile\n                        </BigBlackButton>}\n                        <BigBlackButton htmlType=\"submit\">\n                            {!isModifyProfilePage ? \"Take The Quiz\" : \"Update Profile\" }\n                        </BigBlackButton>\n                    </Row>\n                </Form.Item> \n           \n        </Form>\n    );\n}\n\nexport default FormPersonalData","import React, {useState, useContext} from 'react'\nimport { Form, Input, Button, Checkbox, Row, Col, Select, Upload, message, Spin } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport _ from 'lodash'\nimport {User, VisaStatus, NavBarStatus, Employer, UNIVERSAL_COLOR} from '../../../model/model'\nimport FormProps from '../FormProps'\nimport {UploadFile} from 'antd/lib/upload/interface'\nimport {storage_ref, myFirebase} from '../../../lib/firebase'\nimport {removeUser} from '../../../lib/server'\nimport {UserContext} from '../../../lib/UserProvider'\nimport Loading from '../../General/Loading'\nimport {BigBlackButton} from '../../General/BigBlackButton'\nconst {Option} = Select\n\ninterface FormBusinessDataProps extends FormProps {\n    modifyProfile?: boolean\n}\n\nconst FormBusinessData: React.FC<FormBusinessDataProps> = (props) => {\n    const {changeCurrentUser, changeStep, changeNavbarStatus, modifyProfile} = props\n    const {currentUser, changeUser} = useContext(UserContext)\n    const [checked, changeChecked] = useState(false)\n    const isModifyProfilePage = modifyProfile !== undefined\n\n    const goBack = async () => {\n        changeNavbarStatus(NavBarStatus.Undecided)\n        changeStep(-1)\n    }\n\n    if (currentUser == undefined) {\n        return (<Loading />)\n    }\n\n    const getRules = (name) => {\n        return [{ required: !isModifyProfilePage, message: !isModifyProfilePage ? `${name} is required` : '' }]\n    }\n\n    const onFinish = (values) => {\n        if (!isModifyProfilePage && !checked) {\n            message.error('Please agree to the Terms of Service')\n            return\n        }\n\n        const newEmployer = {\n            email: currentUser.email,\n            id: currentUser.id,\n            firstName: currentUser.firstName,\n            lastName: currentUser.lastName,\n            companyName: values.companyName,\n            phoneNumber: values.phoneNumber,\n            location: values.location\n        }\n\n        changeCurrentUser(_.pickBy(newEmployer, _.identity))\n        if (isModifyProfilePage) {\n            message.success(\"Your profile has been updated\")\n        } else {\n            changeStep(1)\n        }\n    }\n\n    const onFinishFailed = () => {\n        message.error('There was an error completing your account. Ensure every field is filled out.')\n    }\n\n    return (\n        <Form\n            name=\"basic\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n            onFinishFailed={onFinishFailed}\n        >\n            {!isModifyProfilePage ? \n            <>\n                <Form.Item\n                    label=\"Name\"\n                    name=\"firstName\"\n                >\n                    <Input.Group>\n                        <Row>\n                            <Col span={11}>\n                                <Input disabled defaultValue={currentUser.firstName}/>\n                            </Col>\n                            <Col span={2}/>\n                            <Col span={11}>\n                                <Input disabled defaultValue={currentUser.lastName}/>\n                            </Col>\n                        </Row>\n                    </Input.Group>\n                </Form.Item>\n\n                <Form.Item\n                    label=\"Email\"\n                    name=\"email\"\n                >\n                    <Input disabled defaultValue={currentUser.email}/>\n                </Form.Item>\n            </>\n            : null}\n            \n\n            <Form.Item\n                label=\"Company Name\"\n                name=\"companyName\"\n                rules={getRules(\"Company Name\")}\n            >\n                <Input defaultValue={modifyProfile ? '' : (currentUser as Employer).companyName || \"\"} placeholder=\"Company Name\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Phone Number\"\n                name=\"phoneNumber\"\n                rules={getRules(\"Phone Number\")}\n            >\n                <Input defaultValue={modifyProfile ? '' : (currentUser as Employer).phoneNumber || \"\"} placeholder=\"+1 (555) 555-5555\"/>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Location\"\n                name=\"location\"\n                rules={getRules(\"Location\")}\n            >\n                <Input defaultValue={modifyProfile ? '' : (currentUser as Employer).location || \"\"} placeholder=\"New York City\"/>\n            </Form.Item>\n\n            {!isModifyProfilePage ? \n            <Form.Item \n                valuePropName={'checked'}\n                >\n                    <Checkbox style={{fontFamily: 'Mark Pro'}} checked={checked} onChange={(e) => changeChecked(e.target.checked)}>Agree to the <a style={{color: UNIVERSAL_COLOR}} target={'_blank'} href={'/terms'}>Terms of Service</a></Checkbox>\n            </Form.Item> \n            : null }\n\n            <Form.Item>\n                <Row justify=\"space-between\" align=\"middle\">\n                    {!isModifyProfilePage ? \n                        <BigBlackButton type=\"default\" onClick={goBack}>\n                            Back\n                        </BigBlackButton>\n                    : null}\n                    <BigBlackButton style={{marginTop: 10}} htmlType=\"submit\">\n                        {isModifyProfilePage ? \"Update Company Profile\" : \"Finish Setup\"}\n                    </BigBlackButton>\n                </Row>\n            </Form.Item>\n        </Form>\n    );\n}\n\nexport default FormBusinessData","import React, { useState, useContext } from 'react'\nimport {OnboardNavbar} from './OnboardNavbar'\nimport {Container} from '../General/Container'\nimport {Typography} from 'antd'\nimport {User, NavBarStatus, Employer} from '../../model/model'\nimport FormPersonalData from './Designers/FormPersonalData'\nimport FormBusinessData from './Employers/FormBusinessData'\nimport QuizScreen from './Designers/QuizScreen'\nimport EmployerDesigner from './EmployerDesigner'\nimport styled from 'styled-components'\nimport {UserContext} from '../../lib/UserProvider'\nimport {createUser, createEmployer} from '../../lib/server'\nimport Router from 'next/router'\nimport OpenPage from '../General/OpenPage'\n\nconst Title = styled(Typography.Title)`\n    padding-top: 15px;\n    padding-bottom: 35px;\n`\n\ninterface OnboardProps {\n    deleteUser: () => void\n}\n\nexport const Onboard: React.FC<OnboardProps> = props => {\n    const [currentStep, changeStep] = useState(0);\n    const [navBarStatus, changeNavbarStatus] = useState<NavBarStatus>(NavBarStatus.Undecided);\n    const {currentUser, changeUser, loading, setLoading}  = useContext(UserContext)\n\n    const updateUser = async (updatedUser: User) => {\n        window.analytics.track('Create User');\n        changeUser(updatedUser)\n        await createUser(updatedUser)\n    }\n\n    const updateEmployer = async (updatedUser: Employer) => {\n        window.analytics.track('Create Employer');\n        changeUser(updatedUser)\n        await createEmployer(updatedUser)\n    }\n    var currentForm;\n    var title;\n    switch (currentStep) {\n        case 0:\n            currentForm = <EmployerDesigner \n                                    deleteUser={props.deleteUser}\n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}/>;\n            break;\n        case 1:\n            if (navBarStatus == NavBarStatus.Designer) {\n                currentForm = <FormPersonalData \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}\n                                    changeCurrentUser={async (user) => await updateUser(user)}/>;\n            } else {\n                currentForm = <FormBusinessData \n                                    changeNavbarStatus={(newStatus) => changeNavbarStatus(newStatus)}\n                                    changeStep={(change) => changeStep(currentStep + change)}\n                                    changeCurrentUser={async (user) => await updateEmployer(user)}/>;\n            }\n            break;\n        case 2:\n            if (navBarStatus == NavBarStatus.Designer) {\n                OpenPage(setLoading, '/dashboard_user')\n            } else {\n                OpenPage(setLoading, '/dashboard_employer')\n            }\n            break;\n    }\n\n    return (\n        <Container>\n            <OnboardNavbar status={navBarStatus} currentStep={currentStep}/>\n            <Title>{title}</Title>\n            {currentForm}\n        </Container>\n    );\n}","import React, { Component, createContext } from \"react\";\nimport { myFirebase } from \"./firebase\";\nimport {User, Employer} from '../model/model'\nimport {getEmployer, getUser} from './server'\nimport Router, {withRouter} from \"next/router\";\nimport {message} from 'antd'\nimport Loading from '../components/General/Loading'\nimport { NextPage, NextPageContext } from 'next';\n\ninterface ContextProps {\n  loading: boolean,\n  setLoading: (newLoad: boolean) => void,\n  currentUser: User | Employer | null,\n  changeUser: (newUser: User | Employer | null) => void\n}\n\nexport const UserContext = createContext<Partial<ContextProps>>({\n    currentUser: null,\n    changeUser: () => {},\n    loading: false,\n    setLoading: () => {}\n});\nclass UserProvider extends Component {\n  changeUser = (newUser: User | Employer | null) => {\n      console.log('This is current: ' + newUser)\n      this.setState({currentUser: newUser})\n  }\n\n  setLoading = (newLoad: boolean) => {\n      this.setState({loading: newLoad})\n  }\n\n  state = {\n    loading: false,\n    currentUser: null,\n    changeUser: this.changeUser,\n    setLoading: this.setLoading\n  };\n\n  componentDidMount = () => {\n    myFirebase.auth().onAuthStateChanged(async (userAuth) => {\n      //this.setLoading(true)\n      if (userAuth === null) {\n          this.setLoading(false)\n          return\n      }\n\n      if (userAuth.isAnonymous) {\n        console.log('userauth:' + userAuth)\n        this.changeUser({\n          firstName: '',\n          lastName: '',\n          email: '',\n          id: userAuth.uid,\n          isAnonymous: true\n        } as Employer)\n        this.setLoading(false)\n        return\n      }\n\n      // This is some of the worst code I've ever made\n      var current;\n      try {\n        current = await getUser(userAuth.uid)\n      } catch (error) {\n        try {\n          current = await getEmployer(userAuth.uid)\n          current[\"user_exists\"] = false\n        } catch (error) {\n          console.log(\"this better be a new user\")\n        }\n      }\n\n      if (current !== undefined && current['user_exists'] === undefined) {\n          this.changeUser(current as User)\n          window.analytics.identify(current.id, {\n            name: current.name,\n            email: current.email\n          });\n      } else if (current !== undefined && current['employer_exists'] === undefined) {\n          this.changeUser(current as Employer)\n          window.analytics.identify(current.id, {\n            name: current.name,\n            email: current.email\n          });\n      } else {\n            if (userAuth.email === null && userAuth.isAnonymous === false) {\n              // something's wrong\n              myFirebase.auth().signOut()\n              this.changeUser(undefined)\n              this.setLoading(false)\n              return\n            }\n            // In process of making account\n            this.changeUser({\n                email: userAuth.email,\n                id: userAuth.uid,\n                firstName: userAuth.displayName.substr(0, userAuth.displayName.indexOf(' ')),\n                lastName: userAuth.displayName.substr(userAuth.displayName.indexOf(' ')+1),\n            })  \n            this.setLoading(false)\n      }\n    });\n  };\n  render() {\n    return (\n      <UserContext.Provider value={this.state}>\n        <Loading loading={this.state.loading}/>\n        {this.props.children}\n      </UserContext.Provider>\n    );\n  }\n}\nexport default UserProvider;","import { QA, User, Employer, EmployerDecisionHire, DesignerDecisionTalk, CommForDesigner, Communication, CommForEmployer } from \"../model/model\";\nimport axios from 'axios';\n\nconst SERVER_BASE = 'https://server.sumpixel.com/'\n\nenum HTTP_Requests {\n    GET = 'GET',\n    POST = 'POST',\n    PUT = 'PUT'\n}\n\nconst request = async (url: string, params, method: HTTP_Requests = HTTP_Requests.GET) => {\n    var response;\n    switch (method) {\n        case HTTP_Requests.GET:\n            response = await axios.get(SERVER_BASE + url, {params: params});\n            break;\n        case HTTP_Requests.POST:\n            response = await axios.post(SERVER_BASE + url, params);\n            break;\n        case HTTP_Requests.PUT:\n            response = await axios.put(SERVER_BASE + url, params);\n            break;\n    }\n\n    if (response.status !== 200) {\n        return generateErrorResponse('The server responded with an unexpected status.');\n    }\n\n    const result = response.data;\n\n    return result;\n\n}\n\nconst generateErrorResponse = (message) => {\n    return {\n        status : 'error',\n        message\n    };\n}\n\nexport const getUser = async (id: string): Promise<User | {user_exists: boolean}> => {\n    return await request('get-user', {id: id})\n}\n\nexport const getEmployer = async (id: string): Promise<Employer | {user_exists: boolean}> => {\n    return await request('get-employer', {id: id})\n}\n\nexport const removeUser = async (id: string) => {\n    return await request('remove-user', {id: id})\n}\n\nexport const removeEmployer = async (id: string) => {\n    return await request('remove-employer', {id: id})\n}\n\nexport const createUser = async (user: User) => {\n    return await request('create-user', user, HTTP_Requests.POST)\n}\n\nexport const modifyUser = async (user: User) => {\n    return await request('modify-user', user, HTTP_Requests.POST)\n}\n\nexport const createEmployer = async (employer: Employer) => {\n    return await request('create-employer', employer, HTTP_Requests.POST)\n}\n\nexport const modifyEmployer = async (employer: Employer) => {\n    return await request('modify-employer', employer, HTTP_Requests.POST)\n}\n\nexport const createCommunication = async (designerId: string, employerId: string): Promise<Communication> => {\n    return await request('create-new-communication', {designerId: designerId, employerId: employerId }, HTTP_Requests.POST)\n}\n\nexport const updateDesignerDecision = async (commId: string, decision: DesignerDecisionTalk) => {\n    return await request('update-designer-decision', {id: commId, designerApprovedTalk: decision }, HTTP_Requests.POST)\n}\n\nexport const updateEmployerDecision = async (commId: string, decision: EmployerDecisionHire) => {\n    return await request('update-employer-decision', {id: commId, decision: decision }, HTTP_Requests.POST)\n}\n\nexport const getDesignCommunicationsList = async (id: string): Promise<CommForDesigner[]> => {\n    return await request('get-all-designer-communications', {id})\n}\n\nexport const getEmployerCommunicationsList = async (id: string): Promise<CommForEmployer[]> => {\n    return await request('get-all-employer-communications', {id})\n}\n\nexport const getGradedDesigners = async (id: string): Promise<User[]> => {\n    return await request('get-graded-designers', {id})\n}\n\nexport const getDesignerFromCommunication = async (id: string): Promise<User> => {\n    return await request('get-designer-from-communication', {id})\n}\n\nexport const getQAById = async (id: string): Promise<QA[]> => {\n    return await request('get_qa_by_id', {id})\n}","import React, {useEffect, useState, useContext} from 'react'\nimport {message} from 'antd'\nimport {PopupModal} from '../components/General/PopupModal';\nimport {myFirebase} from '../lib/firebase'\nimport {Onboard} from '../components/OnboardingFlow/Onboard'\nimport { UserContext } from '../lib/UserProvider';\nimport Head from 'next/head'\nimport LoginComponent from '../components/Login/LoginComponent'\nimport Router from 'next/router'\nimport OpenPage from '../components/General/OpenPage';\n\nconst Onboarding: React.FC = (props) => {\n    const {currentUser, changeUser, setLoading} = useContext(UserContext)\n    useEffect(() => {\n        window.analytics.page('Onboarding')\n    }, [])\n\n    const deleteUser = async () => {\n        window.analytics.track('Go Back - Delete Firebase User');\n        setTimeout(async () => await myFirebase.auth().currentUser.delete(), 1000)\n        changeUser(undefined)\n        OpenPage(setLoading, '/signup')\n    }\n\n    return (\n        <>\n            <Head>\n                <title>Onboarding</title>\n            </Head>\n            <div style={{backgroundColor: '#fff', position: 'absolute', width: '100%', height: '100%'}}>\n                <Onboard deleteUser={deleteUser}/>\n            </div>\n        </>\n    );\n};\n\nexport default Onboarding;"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAWA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AAFA;AAIA;AAAA;AAAA;AAAA;AAOA;AACA;AAFA;AAIA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1BA;AAkCA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAKA;AACA;AAFA;AAIA;AAAA;AAAA;AAIA;AACA;AAFA;AAIA;AAAA;AAAA;AAKA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAQA;AACA;AACA;;;;;;;;;;;;AC1QA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AASA;AACA;AAFA;AAMA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAOA;AACA;AAFA;AAIA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAIA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAKA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAEA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;ACrJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAIA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA1BA;AACA;AA4BA;AAEA;AAAA;AAAA;AAKA;;;;;;;;;;;;;;;;;;;;;AC9EA;AACA;AAEA;AAGA;AAUA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AAAA;AAAA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AAJA;AACA;AAXA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAjFA;AACA;AAiFA;AACA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AA1FA;AACA;AA0FA;;;;;;;;;;;;AChHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AATA;AACA;AAWA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;ACxGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}